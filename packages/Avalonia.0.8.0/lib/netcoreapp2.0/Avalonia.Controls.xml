<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Controls</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Controls.AppBuilderBase`1">
            <summary>
            Base class for initializing platform-specific services for an <see cref="T:Avalonia.Application"/>.
            </summary>
            <typeparam name="TAppBuilder">The type of the AppBuilder class itself.</typeparam>
        </member>
        <member name="P:Avalonia.Controls.AppBuilderBase`1.RuntimePlatform">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Platform.IRuntimePlatform"/> instance.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilderBase`1.RuntimePlatformServicesInitializer">
            <summary>
            Gets or sets a method to call the initialize the runtime platform services (e. g. AssetLoader)
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilderBase`1.Instance">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Application"/> instance being initialized.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilderBase`1.WindowingSubsystemInitializer">
            <summary>
            Gets or sets a method to call the initialize the windowing subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilderBase`1.WindowingSubsystemName">
            <summary>
            Gets the name of the currently selected windowing subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilderBase`1.RenderingSubsystemInitializer">
            <summary>
            Gets or sets a method to call the initialize the windowing subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilderBase`1.RenderingSubsystemName">
            <summary>
            Gets the name of the currently selected rendering subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilderBase`1.AfterSetupCallback">
            <summary>
            Gets or sets a method to call after the <see cref="T:Avalonia.Application"/> is setup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilderBase`1.BeforeStartCallback">
            <summary>
            Gets or sets a method to call before Start is called on the <see cref="T:Avalonia.Application"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.Configure``1">
            <summary>
            Begin configuring an <see cref="T:Avalonia.Application"/>.
            </summary>
            <typeparam name="TApp">The subclass of <see cref="T:Avalonia.Application"/> to configure.</typeparam>
            <returns>An <typeparamref name="TAppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.Configure(Avalonia.Application)">
            <summary>
            Begin configuring an <see cref="T:Avalonia.Application"/>.
            </summary>
            <returns>An <typeparamref name="TAppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.BeforeStarting(System.Action{`0})">
            <summary>
            Registers a callback to call before Start is called on the <see cref="T:Avalonia.Application"/>.
            </summary>
            <param name="callback">The callback.</param>
            <returns>An <typeparamref name="TAppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.Start``1(System.Func{System.Object})">
            <summary>
            Starts the application with an instance of <typeparamref name="TMainWindow"/>.
            </summary>
            <typeparam name="TMainWindow">The window type.</typeparam>
            <param name="dataContextProvider">A delegate that will be called to create a data context for the window (optional).</param>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.Start``1(``0,System.Func{System.Object})">
            <summary>
            Starts the application with the provided instance of <typeparamref name="TMainWindow"/>.
            </summary>
            <typeparam name="TMainWindow">The window type.</typeparam>
            <param name="mainWindow">Instance of type TMainWindow to use when starting the app</param>
            <param name="dataContextProvider">A delegate that will be called to create a data context for the window (optional).</param>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.SetupWithoutStarting">
            <summary>
            Sets up the platform-specific services for the application, but does not run it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.UseWindowingSubsystem(System.Action,System.String)">
            <summary>
            Specifies a windowing subsystem to use.
            </summary>
            <param name="initializer">The method to call to initialize the windowing subsystem.</param>
            <param name="name">The name of the windowing subsystem.</param>
            <returns>An <typeparamref name="TAppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.UseWindowingSubsystem(System.String)">
            <summary>
            Specifies a windowing subsystem to use.
            </summary>
            <param name="dll">The dll in which to look for subsystem.</param>
            <returns>An <typeparamref name="TAppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.UseRenderingSubsystem(System.Action,System.String)">
            <summary>
            Specifies a rendering subsystem to use.
            </summary>
            <param name="initializer">The method to call to initialize the rendering subsystem.</param>
            <param name="name">The name of the rendering subsystem.</param>
            <returns>An <typeparamref name="TAppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.UseRenderingSubsystem(System.String)">
            <summary>
            Specifies a rendering subsystem to use.
            </summary>
            <param name="dll">The dll in which to look for subsystem.</param>
            <returns>An <typeparamref name="TAppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.SetExitMode(Avalonia.ExitMode)">
            <summary>
            Sets the shutdown mode of the application.
            </summary>
            <param name="exitMode">The shutdown mode.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.With``1(``0)">
            <summary>
            Configures platform-specific options
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.With``1(System.Func{``0})">
            <summary>
            Configures platform-specific options
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AppBuilderBase`1.Setup">
            <summary>
            Sets up the platform-speciic services for the <see cref="T:Avalonia.Application"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.PopulatedEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.Populated" />
            event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.PopulatedEventArgs.Data">
            <summary>
            Gets the list of possible matches added to the drop-down portion of
            the <see cref="T:Avalonia.Controls.AutoCompleteBox" />
            control.
            </summary>
            <value>The list of possible matches added to the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" />.</value>
        </member>
        <member name="M:Avalonia.Controls.PopulatedEventArgs.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.PopulatedEventArgs" />.
            </summary>
            <param name="data">The list of possible matches added to the
            drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.</param>
        </member>
        <member name="T:Avalonia.Controls.PopulatingEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.Populating" />
            event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.PopulatingEventArgs.Parameter">
            <summary>
            Gets the text that is used to determine which items to display in
            the <see cref="T:Avalonia.Controls.AutoCompleteBox" />
            control.
            </summary>
            <value>The text that is used to determine which items to display in
            the <see cref="T:Avalonia.Controls.AutoCompleteBox" />.</value>
        </member>
        <member name="M:Avalonia.Controls.PopulatingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.PopulatingEventArgs" />.
            </summary>
            <param name="parameter">The value of the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.SearchText" />
            property, which is used to filter items for the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.</param>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteFilterPredicate`1">
            <summary>
            Represents the filter used by the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control to
            determine whether an item is a possible match for the specified text.
            </summary>
            <returns>true to indicate <paramref name="item" /> is a possible match
            for <paramref name="search" />; otherwise false.</returns>
            <param name="search">The string used as the basis for filtering.</param>
            <param name="item">The item that is compared with the
            <paramref name="search" /> parameter.</param>
            <typeparam name="T">The type used for filtering the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" />. This type can
            be either a string or an object.</typeparam>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteFilterMode">
            <summary>
            Specifies how text in the text box portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control is used
            to filter items specified by the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property for display in the drop-down.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.None">
            <summary>
            Specifies that no filter is used. All items are returned.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWith">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the
            returned items start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCultureIgnoreCase" /> as
            the string comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWithCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the
            returned items start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCulture" /> as the string
            comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWithOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned
            items start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.OrdinalIgnoreCase" /> as the
            string comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWithOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items
            start with the specified text. The filter uses the
            <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />
            method, specifying <see cref="P:System.StringComparer.Ordinal" /> as
            the string comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.Contains">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the
            returned items contain the specified text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.ContainsCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the
            returned items contain the specified text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.ContainsOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned
            items contain the specified text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.ContainsOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items
            contain the specified text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.Equals">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the
            returned items equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCultureIgnoreCase" /> as
            the search comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.EqualsCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the
            returned items equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.CurrentCulture" /> as the string
            comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.EqualsOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned
            items equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying
            <see cref="P:System.StringComparer.OrdinalIgnoreCase" /> as the
            string comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.EqualsOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items
            equal the specified text. The filter uses the
            <see cref="M:System.String.Equals(System.String,System.StringComparison)" />
            method, specifying <see cref="P:System.StringComparer.Ordinal" /> as
            the string comparison criteria.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteFilterMode.Custom">
            <summary>
            Specifies that a custom filter is used. This mode is used when the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.TextFilter" />
            or
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemFilter" />
            properties are set.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteBox">
            <summary>
            Represents a control that provides a text box for user input and a
            drop-down that contains possible matches based on the input in the text
            box.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ElementSelectionAdapter">
            <summary>
            Specifies the name of the selection adapter TemplatePart.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ElementSelector">
            <summary>
            Specifies the name of the Selector TemplatePart.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ElementPopup">
            <summary>
            Specifies the name of the Popup TemplatePart.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ElementTextBox">
            <summary>
            The name for the text box part.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._items">
            <summary>
            Gets or sets a local cached copy of the items data.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._view">
            <summary>
            Gets or sets the observable collection that contains references to
            all of the items in the generated view of data that is provided to
            the selection-style control adapter.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._ignoreTextPropertyChange">
            <summary>
            Gets or sets a value to ignore a number of pending change handlers.
            The value is decremented after each use. This is used to reset the
            value of properties without performing any of the actions in their
            change handlers.
            </summary>
            <remarks>The int is important as a value because the TextBox
            TextChanged event does not immediately fire, and this will allow for
            nested property changes to be ignored.</remarks>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._ignorePropertyChange">
            <summary>
            Gets or sets a value indicating whether to ignore calling a pending
            change handlers.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._ignoreTextSelectionChange">
            <summary>
            Gets or sets a value indicating whether to ignore the selection
            changed event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._skipSelectedItemTextUpdate">
            <summary>
            Gets or sets a value indicating whether to skip the text update
            processing when the selected item is updated.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._textSelectionStart">
            <summary>
            Gets or sets the last observed text box selection start location.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._userCalledPopulate">
            <summary>
            Gets or sets a value indicating whether the user initiated the
            current populate call.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._popupHasOpened">
            <summary>
            A value indicating whether the popup has been opened at least once.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._delayTimer">
            <summary>
            Gets or sets the DispatcherTimer used for the MinimumPopulateDelay
            condition for auto completion.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._allowWrite">
            <summary>
            Gets or sets a value indicating whether a read-only dependency
            property change handler should allow the value to be set.  This is
            used to ensure that read-only properties cannot be changed via
            SetValue, etc.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._textBox">
            <summary>
            The TextBox template part.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._adapter">
            <summary>
            The SelectionAdapter.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._valueBindingEvaluator">
            <summary>
            A control that can provide updated string values from a binding.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox._collectionChangeSubscription">
            <summary>
            A weak subscription for the collection changed event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.MinimumPrefixLength" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.MinimumPrefixLength" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelay" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelay" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.MaxDropDownHeight" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.MaxDropDownHeight" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabled" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabled" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemTemplate" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemTemplate" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.SelectedItemProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.SelectedItem" />
            dependency property.
            </summary>
            <value>The identifier the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.SelectedItem" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.TextProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.Text" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.Text" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.SearchTextProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.SearchText" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.SearchText" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.FilterModeProperty">
            <summary>
            Gets the identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.FilterMode" />
            dependency property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ItemFilterProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemFilter" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemFilter" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.TextFilterProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.TextFilter" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.TextFilter" />
            dependency property.</value>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.ItemsProperty">
            <summary>
            Identifies the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            dependency property.
            </summary>
            <value>The identifier for the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            dependency property.</value>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnControlIsEnabledChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Handle the change of the IsEnabled property.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnMinimumPopulateDelayChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            MinimumPopulateDelayProperty property changed handler. Any current
            dispatcher timer will be stopped. The timer will not be restarted
            until the next TextUpdate call by the user.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnIsDropDownOpenChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            IsDropDownOpenProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnTextPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            TextProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnFilterModePropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            FilterModeProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnItemFilterPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            ItemFilterProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnItemsPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.MinimumPrefixLength">
            <summary>
            Gets or sets the minimum number of characters required to be entered
            in the text box before the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> displays
            possible matches.
            matches.
            </summary>
            <value>
            The minimum number of characters to be entered in the text box
            before the <see cref="T:Avalonia.Controls.AutoCompleteBox" />
            displays possible matches. The default is 1.
            </value>
            <remarks>
            If you set MinimumPrefixLength to -1, the AutoCompleteBox will
            not provide possible matches. There is no maximum value, but
            setting MinimumPrefixLength to value that is too large will
            prevent the AutoCompleteBox from providing possible matches as well.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabled">
            <summary>
            Gets or sets a value indicating whether the first possible match
            found during the filtering process will be displayed automatically
            in the text box.
            </summary>
            <value>
            True if the first possible match found will be displayed
            automatically in the text box; otherwise, false. The default is
            false.
            </value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.ItemTemplate">
            <summary>
            Gets or sets the <see cref="T:Avalonia.DataTemplate" /> used
            to display each item in the drop-down portion of the control.
            </summary>
            <value>The <see cref="T:Avalonia.DataTemplate" /> used to
            display each item in the drop-down. The default is null.</value>
            <remarks>
            You use the ItemTemplate property to specify the visualization
            of the data objects in the drop-down portion of the AutoCompleteBox
            control. If your AutoCompleteBox is bound to a collection and you
            do not provide specific display instructions by using a
            DataTemplate, the resulting UI of each item is a string
            representation of each object in the underlying collection.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelay">
            <summary>
            Gets or sets the minimum delay, after text is typed
            in the text box before the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control
            populates the list of possible matches in the drop-down.
            </summary>
            <value>The minimum delay, after text is typed in
            the text box, but before the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> populates
            the list of possible matches in the drop-down. The default is 0.</value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The maximum height of the drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            The default is <see cref="F:System.Double.PositiveInfinity" />.</value>
            <exception cref="T:System.ArgumentException">The specified value is less than 0.</exception>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down portion of
            the control is open.
            </summary>
            <value>
            True if the drop-down is open; otherwise, false. The default is
            false.
            </value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.ValueMemberBinding">
            <summary>
            Gets or sets the  <see cref="T:Avalonia.Data.Binding" /> that
            is used to get the values for display in the text portion of
            the <see cref="T:Avalonia.Controls.AutoCompleteBox" />
            control.
            </summary>
            <value>The <see cref="T:Avalonia.Data.IBinding" /> object used
            when binding to a collection property.</value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.ValueMemberSelector">
            <summary>
            Gets or sets the MemberSelector that is used to get values for
            display in the text portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The MemberSelector that is used to get values for display in
            the text portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.</value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.SelectedItem">
            <summary>
            Gets or sets the selected item in the drop-down.
            </summary>
            <value>The selected item in the drop-down.</value>
            <remarks>
            If the IsTextCompletionEnabled property is true and text typed by
            the user matches an item in the ItemsSource collection, which is
            then displayed in the text box, the SelectedItem property will be
            a null reference.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.Text">
            <summary>
            Gets or sets the text in the text box portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The text in the text box portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.</value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.SearchText">
            <summary>
            Gets the text that is used to filter items in the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            item collection.
            </summary>
            <value>The text that is used to filter items in the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            item collection.</value>
            <remarks>
            The SearchText value is typically the same as the
            Text property, but is set after the TextChanged event occurs
            and before the Populating event.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.FilterMode">
            <summary>
            Gets or sets how the text in the text box is used to filter items
            specified by the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property for display in the drop-down.
            </summary>
            <value>One of the
            <see cref="T:Avalonia.Controls.AutoCompleteFilterMode" />
            values The default is
            <see cref="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWith" />.</value>
            <exception cref="T:System.ArgumentException">The specified value is
            not a valid
            <see cref="T:Avalonia.Controls.AutoCompleteFilterMode" />.</exception>
            <remarks>
            Use the FilterMode property to specify how possible matches are
            filtered. For example, possible matches can be filtered in a
            predefined or custom way. The search mode is automatically set to
            Custom if you set the ItemFilter property.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.ItemFilter">
            <summary>
            Gets or sets the custom method that uses user-entered text to filter
            the items specified by the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property for display in the drop-down.
            </summary>
            <value>The custom method that uses the user-entered text to filter
            the items specified by the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property. The default is null.</value>
            <remarks>
            The filter mode is automatically set to Custom if you set the
            ItemFilter property.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.TextFilter">
            <summary>
            Gets or sets the custom method that uses the user-entered text to
            filter items specified by the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property in a text-based way for display in the drop-down.
            </summary>
            <value>The custom method that uses the user-entered text to filter
            items specified by the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />
            property in a text-based way for display in the drop-down.</value>
            <remarks>
            The search mode is automatically set to Custom if you set the
            TextFilter property.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.Items">
            <summary>
            Gets or sets a collection that is used to generate the items for the
            drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
            <value>The collection that is used to generate the items of the
            drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.</value>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.DropDownPopup">
            <summary>
            Gets or sets the drop down popup control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.TextBox">
            <summary>
            Gets or sets the Text template part.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.SelectionAdapter">
            <summary>
            Gets or sets the selection adapter used to populate the drop-down
            with a list of selectable items.
            </summary>
            <value>The selection adapter used to populate the drop-down with a
            list of selectable items.</value>
            <remarks>
            You can use this property when you create an automation peer to
            use with AutoCompleteBox or deriving from AutoCompleteBox to
            create a custom control.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.GetSelectionAdapterPart(Avalonia.Controls.INameScope)">
            <summary>
            Returns the
            <see cref="T:Avalonia.Controls.ISelectionAdapter" /> part, if
            possible.
            </summary>
            <returns>
            A <see cref="T:Avalonia.Controls.ISelectionAdapter" /> object,
            if possible. Otherwise, null.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control
            when a new template is applied.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:Avalonia.InputElement.KeyDown" /> event.
            </summary>
            <param name="e">A <see cref="T:Avalonia.Input.KeyEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:Avalonia.UIElement.GotFocus" /> event.
            </summary>
            <param name="e">A <see cref="T:Avalonia.RoutedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:Avalonia.UIElement.LostFocus" /> event.
            </summary>
            <param name="e">A <see cref="T:Avalonia.RoutedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.HasFocus">
            <summary>
            Determines whether the text box or drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control has
            focus.
            </summary>
            <returns>true to indicate the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> has focus;
            otherwise, false.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.FocusChanged(System.Boolean)">
            <summary>
            Handles the FocusChanged event.
            </summary>
            <param name="hasFocus">A value indicating whether the control
            currently has the focus.</param>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.TextChanged">
            <summary>
            Occurs when the text in the text box portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> changes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.Populating">
            <summary>
            Occurs when the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> is
            populating the drop-down with possible matches based on the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.Text" />
            property.
            </summary>
            <remarks>
            If the event is canceled, by setting the PopulatingEventArgs.Cancel
            property to true, the AutoCompleteBox will not automatically
            populate the selection adapter contained in the drop-down.
            In this case, if you want possible matches to appear, you must
            provide the logic for populating the selection adapter.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.Populated">
            <summary>
            Occurs when the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> has
            populated the drop-down with possible matches based on the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.Text" />
            property.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.DropDownOpening">
            <summary>
            Occurs when the value of the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" />
            property is changing from false to true.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.DropDownOpened">
            <summary>
            Occurs when the value of the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" />
            property has changed from false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.DropDownClosing">
            <summary>
            Occurs when the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" />
            property is changing from true to false.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.DropDownClosed">
            <summary>
            Occurs when the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.IsDropDownOpen" />
            property was changed from true to false and the drop-down is open.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.AutoCompleteBox.SelectionChanged">
            <summary>
            Occurs when the selected item in the drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> has
            changed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnPopulating(Avalonia.Controls.PopulatingEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.Populating" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:Avalonia.Controls.PopulatingEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnPopulated(Avalonia.Controls.PopulatedEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.Populated" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:Avalonia.Controls.PopulatedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnSelectionChanged(Avalonia.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.SelectionChanged" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:Avalonia.Controls.SelectionChangedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnDropDownOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.DropDownOpening" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:Avalonia.Controls.CancelEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnDropDownOpened(System.EventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.DropDownOpened" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.EventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnDropDownClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.DropDownClosing" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:Avalonia.Controls.CancelEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnDropDownClosed(System.EventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.DropDownClosed" />
            event.
            </summary>
            <param name="e">A
            <see cref="T:System.EventArgs" />
            which contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnTextChanged(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.AutoCompleteBox.TextChanged" />
            event.
            </summary>
            <param name="e">A <see cref="T:Avalonia.RoutedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.ClosingDropDown(System.Boolean)">
            <summary>
            Begin closing the drop-down.
            </summary>
            <param name="oldValue">The original value.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OpeningDropDown(System.Boolean)">
            <summary>
            Begin opening the drop down by firing cancelable events, opening the
            drop-down or reverting, depending on the event argument values.
            </summary>
            <param name="oldValue">The original value, if needed for a revert.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.DropDownPopup_Closed(System.Object,System.EventArgs)">
            <summary>
            Connects to the DropDownPopup Closed event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.PopulateDropDown(System.Object,System.EventArgs)">
            <summary>
            Handles the timer tick when using a populate delay.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OpenDropDown">
            <summary>
            Private method that directly opens the popup, checks the expander
            button, and then fires the Opened event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.CloseDropDown">
            <summary>
            Private method that directly closes the popup, flips the Checked
            value, and then fires the Closed event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.FormatValue(System.Object,System.Boolean)">
            <summary>
            Formats an Item for text comparisons based on Converter
            and ConverterCulture properties.
            </summary>
            <param name="value">The object to format.</param>
            <param name="clearDataContext">A value indicating whether to clear
            the data context after the lookup is performed.</param>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.FormatValue(System.Object)">
            <summary>
            Converts the specified object to a string by using the
            <see cref="P:Avalonia.Data.Binding.Converter" /> and
            <see cref="P:Avalonia.Data.Binding.ConverterCulture" /> values
            of the binding object specified by the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.ValueMemberBinding" />
            property.
            </summary>
            <param name="value">The object to format as a string.</param>
            <returns>The string representation of the specified object.</returns>
            <remarks>
            Override this method to provide a custom string conversion.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnTextBoxTextChanged">
            <summary>
            Handle the TextChanged event that is directly attached to the
            TextBox part. This ensures that only user initiated actions will
            result in an AutoCompleteBox suggestion and operation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.UpdateTextValue(System.String)">
            <summary>
            Updates both the text box value and underlying text dependency
            property value if and when they change. Automatically fires the
            text changed events when there is a change.
            </summary>
            <param name="value">The new string value.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.UpdateTextValue(System.String,System.Nullable{System.Boolean})">
            <summary>
            Updates both the text box value and underlying text dependency
            property value if and when they change. Automatically fires the
            text changed events when there is a change.
            </summary>
            <param name="value">The new string value.</param>
            <param name="userInitiated">A nullable bool value indicating whether
            the action was user initiated. In a user initiated mode, the
            underlying text dependency property is updated. In a non-user
            interaction, the text box value is updated. When user initiated is
            null, all values are updated.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.TextUpdated(System.String,System.Boolean)">
            <summary>
            Handle the update of the text for the control from any source,
            including the TextBox part and the Text dependency property.
            </summary>
            <param name="newText">The new text.</param>
            <param name="userInitiated">A value indicating whether the update
            is a user-initiated action. This should be a True value when the
            TextUpdated method is called from a TextBox event handler.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.ClearView">
            <summary>
            A simple helper method to clear the view and ensure that a view
            object is always present and not null.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.RefreshView">
            <summary>
            Walks through the items enumeration. Performance is not going to be
            perfect with the current implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnItemsChanged(System.Collections.IEnumerable)">
            <summary>
            Handle any change to the ItemsSource dependency property, update
            the underlying ObservableCollection view, and set the selection
            adapter's ItemsSource to the view if appropriate.
            </summary>
            <param name="newValue">The new enumerable reference.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that handles the ObservableCollection.CollectionChanged event for the ItemsSource property.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.PopulateComplete">
            <summary>
            Notifies the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> that the
            <see cref="P:Avalonia.Controls.AutoCompleteBox.Items" />
            property has been set and the data can be filtered to provide
            possible matches in the drop-down.
            </summary>
            <remarks>
            Call this method when you are providing custom population of
            the drop-down portion of the AutoCompleteBox, to signal the control
            that you are done with the population process.
            Typically, you use PopulateComplete when the population process
            is a long-running process and you want to cancel built-in filtering
             of the ItemsSource items. In this case, you can handle the
            Populated event and set PopulatingEventArgs.Cancel to true.
            When the long-running process has completed you call
            PopulateComplete to indicate the drop-down is populated.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.UpdateTextCompletion(System.Boolean)">
            <summary>
            Performs text completion, if enabled, and a lookup on the underlying
            item values for an exact match. Will update the SelectedItem value.
            </summary>
            <param name="userInitiated">A value indicating whether the operation
            was user initiated. Text completion will not be performed when not
            directly initiated by the user.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.TryGetMatch(System.String,Avalonia.Collections.AvaloniaList{System.Object},Avalonia.Controls.AutoCompleteFilterPredicate{System.String})">
            <summary>
            Attempts to look through the view and locate the specific exact
            text match.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="view">The view reference.</param>
            <param name="predicate">The predicate to use for the partial or
            exact match.</param>
            <returns>Returns the object or null.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnSelectedItemChanged(System.Object)">
            <summary>
            Called when the selected item is changed, updates the text value
            that is displayed in the text box part.
            </summary>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnAdapterSelectionChanged(System.Object,Avalonia.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event of the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The selection changed event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnAdapterSelectionComplete(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the Commit event on the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.OnAdapterSelectionCanceled(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Handles the Cancel event on the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch">
            <summary>
            A predefined set of filter functions for the known, built-in
            AutoCompleteFilterMode enumeration values.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.GetFilter(Avalonia.Controls.AutoCompleteFilterMode)">
            <summary>
            Index function that retrieves the filter for the provided
            AutoCompleteFilterMode.
            </summary>
            <param name="FilterMode">The built-in search mode.</param>
            <returns>Returns the string-based comparison function.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An implementation of the Contains member of string that takes in a
            string comparison. The traditional .NET string Contains member uses
            StringComparison.Ordinal.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">The string comparison type.</param>
            <returns>Returns true when the substring is found.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.StartsWith(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.StartsWithCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.StartsWithOrdinal(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.StartsWithOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.Contains(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value. The current
            culture's case insensitive string comparison operator is used.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.ContainsCaseSensitive(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.ContainsOrdinal(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.ContainsOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.Equals(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.EqualsCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.EqualsOrdinal(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.AutoCompleteSearch.EqualsOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="T:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1._binding">
            <summary>
            Gets or sets the string value binding used by the control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.Value">
            <summary>
            Gets or sets the data item value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.ValueBinding">
            <summary>
            Gets or sets the value binding.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.#ctor">
            <summary>
            Initializes a new instance of the BindingEvaluator class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.#ctor(Avalonia.Data.IBinding)">
            <summary>
            Initializes a new instance of the BindingEvaluator class,
            setting the initial binding to the provided parameter.
            </summary>
            <param name="binding">The initial string value binding.</param>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.ClearDataContext">
            <summary>
            Clears the data context so that the control does not keep a
            reference to the last-looked up item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.GetDynamicValue(System.Object,System.Boolean)">
            <summary>
            Updates the data context of the framework element and returns the
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <param name="clearDataContext">If set to true, this parameter will
            clear the data context immediately after retrieving the value.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="M:Avalonia.Controls.AutoCompleteBox.BindingEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Updates the data context of the framework element and returns the
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="T:Avalonia.Controls.Border">
            <summary>
            A control which decorates a child with a border and background.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.BorderBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.BorderBrush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.BorderThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.BorderThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.CornerRadiusProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.CornerRadius"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Border.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Border"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.Background">
            <summary>
            Gets or sets a brush with which to paint the background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.BorderBrush">
            <summary>
            Gets or sets a brush with which to paint the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.BorderThickness">
            <summary>
            Gets or sets the thickness of the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.CornerRadius">
            <summary>
            Gets or sets the radius of the border rounded corners.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Border.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the control.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Border.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Border.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the control's child.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="T:Avalonia.Controls.ClickMode">
            <summary>
            Defines how a <see cref="T:Avalonia.Controls.Button"/> reacts to clicks.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ClickMode.Release">
            <summary>
            The <see cref="E:Avalonia.Controls.Button.Click"/> event is raised when the pointer is released.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ClickMode.Press">
            <summary>
            The <see cref="E:Avalonia.Controls.Button.Click"/> event is raised when the pointer is pressed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Button">
            <summary>
            A button control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.ClickModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.ClickMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.CommandProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.Command"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.HotKeyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.HotKey"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.CommandParameterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.CommandParameter"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.IsDefaultProperty">
            <summary>
            Defines the <see cref="F:Avalonia.Controls.Button.IsDefaultProperty"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.ClickEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Button.Click"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Button"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Button.Click">
            <summary>
            Raised when the user clicks the button.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.ClickMode">
            <summary>
            Gets or sets a value indicating how the <see cref="T:Avalonia.Controls.Button"/> should react to clicks.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.Command">
            <summary>
            Gets or sets an <see cref="T:System.Windows.Input.ICommand"/> to be invoked when the button is clicked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.HotKey">
            <summary>
            Gets or sets an <see cref="T:Avalonia.Input.KeyGesture"/> associated with this control
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.CommandParameter">
            <summary>
            Gets or sets a parameter to be passed to the <see cref="P:Avalonia.Controls.Button.Command"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.IsDefault">
            <summary>
            Gets or sets a value indicating whether the button is the default button for the
            window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnKeyUp(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnClick">
            <summary>
            Invokes the <see cref="E:Avalonia.Controls.Button.Click"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.CommandChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Button.Command"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.IsDefaultChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Button.IsDefault"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.CanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event fires.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.ListenForDefault(Avalonia.Input.IInputElement)">
            <summary>
            Starts listening for the Enter key when the button <see cref="P:Avalonia.Controls.Button.IsDefault"/>.
            </summary>
            <param name="root">The input root.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.StopListeningForDefault(Avalonia.Input.IInputElement)">
            <summary>
            Stops listening for the Enter key when the button is no longer <see cref="P:Avalonia.Controls.Button.IsDefault"/>.
            </summary>
            <param name="root">The input root.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.RootKeyDown(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed on the input root and the button <see cref="P:Avalonia.Controls.Button.IsDefault"/>.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.ButtonSpinner">
            <summary>
            Represents a spinner control that includes two Buttons.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ButtonSpinner.AllowSpinProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ButtonSpinner.AllowSpin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ButtonSpinner.ShowButtonSpinner"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocation"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ButtonSpinner.DecreaseButton">
            <summary>
            Gets or sets the DecreaseButton template part.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ButtonSpinner.IncreaseButton">
            <summary>
            Gets or sets the IncreaseButton template part.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ButtonSpinner"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ButtonSpinner.AllowSpin">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Avalonia.Controls.ButtonSpinner"/> should allow to spin.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ButtonSpinner.ShowButtonSpinner">
            <summary>
            Gets or sets a value indicating whether the spin buttons should be shown.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocation">
            <summary>
            Gets or sets current location of the <see cref="T:Avalonia.Controls.ButtonSpinner"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnAllowSpinChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.ButtonSpinner.AllowSpin"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.AllowSpinChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.ButtonSpinner.AllowSpin"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.SetButtonUsage">
            <summary>
            Disables or enables the buttons based on the valid spin direction.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ButtonSpinner.OnButtonClick(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when user clicks one of the spin buttons.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.CalendarMode">
            <summary>
            Specifies values for the different modes of operation of a
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarMode.Month">
            <summary>
            The <see cref="T:Avalonia.Controls.Calendar" /> displays a
            month at a time.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarMode.Year">
            <summary>
            The <see cref="T:Avalonia.Controls.Calendar" /> displays a
            year at a time.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarMode.Decade">
            <summary>
            The <see cref="T:Avalonia.Controls.Calendar" /> displays a
            decade at a time.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.CalendarSelectionMode">
            <summary>
            Specifies values that describe the available selection modes for a
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
            <remarks>
            This enumeration provides the values that are used by the SelectionMode
            property.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.CalendarSelectionMode.SingleDate">
            <summary>
            Only a single date can be selected. Use the
            <see cref="P:Avalonia.Controls.Calendar.SelectedDate" />
            property to retrieve the selected date.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarSelectionMode.SingleRange">
            <summary>
            A single range of dates can be selected. Use 
            <see cref="P:Avalonia.Controls.Calendar.SelectedDates" />
            property to retrieve the selected dates.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarSelectionMode.MultipleRange">
            <summary>
            Multiple non-contiguous ranges of dates can be selected. Use the
            <see cref="P:Avalonia.Controls.Calendar.SelectedDates" />
            property to retrieve the selected dates.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.CalendarSelectionMode.None">
            <summary>
            No selections are allowed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.CalendarDateChangedEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Avalonia.Controls.Calendar.DisplayDateChanged" />
            event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.CalendarDateChangedEventArgs.RemovedDate">
            <summary>
            Gets the date that was previously displayed.
            </summary>
            <value>
            The date previously displayed.
            </value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDateChangedEventArgs.AddedDate">
            <summary>
            Gets the date to be newly displayed.
            </summary>
            <value>The new date to display.</value>
        </member>
        <member name="M:Avalonia.Controls.CalendarDateChangedEventArgs.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the CalendarDateChangedEventArgs
            class.
            </summary>
            <param name="removedDate">
            The date that was previously displayed.
            </param>
            <param name="addedDate">The date to be newly displayed.</param>
        </member>
        <member name="T:Avalonia.Controls.CalendarModeChangedEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Avalonia.Controls.Calendar.DisplayModeChanged" />
            event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.CalendarModeChangedEventArgs.OldMode">
            <summary>
            Gets the previous mode of the
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
            <value>
            A <see cref="T:Avalonia.Controls.CalendarMode" /> representing
            the previous mode.
            </value>
        </member>
        <member name="P:Avalonia.Controls.CalendarModeChangedEventArgs.NewMode">
            <summary>
            Gets the new mode of the
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
            <value>
            A <see cref="T:Avalonia.Controls.CalendarMode" /> 
            the new mode.
            </value>
        </member>
        <member name="M:Avalonia.Controls.CalendarModeChangedEventArgs.#ctor(Avalonia.Controls.CalendarMode,Avalonia.Controls.CalendarMode)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.CalendarModeChangedEventArgs" />
            class.
            </summary>
            <param name="oldMode">The previous mode.</param>
            <param name="newMode">The new mode.</param>
        </member>
        <member name="T:Avalonia.Controls.Calendar">
            <summary>
            Represents a control that enables a user to select a date by using a
            visual calendar display.
            </summary>
            <remarks>
            <para>
            A Calendar control can be used on its own, or as a drop-down part of a
            DatePicker control. For more information, see DatePicker.  A Calendar
            displays either the days of a month, the months of a year, or the years
            of a decade, depending on the value of the DisplayMode property.  When
            displaying the days of a month, the user can select a date, a range of
            dates, or multiple ranges of dates.  The kinds of selections that are
            allowed are controlled by the SelectionMode property.
            </para>
            <para>
            The range of dates displayed is governed by the DisplayDateStart and
            DisplayDateEnd properties.  If DisplayMode is Year or Decade, only
            months or years that contain displayable dates will be displayed.
            Setting the displayable range to a range that does not include the
            current DisplayDate will throw an ArgumentOutOfRangeException.
            </para>
            <para>
            The BlackoutDates property can be used to specify dates that cannot be
            selected. These dates will be displayed as dimmed and disabled.
            </para>
            <para>
            By default, Today is highlighted.  This can be disabled by setting
            IsTodayHighlighted to false.
            </para>
            <para>
            The Calendar control provides basic navigation using either the mouse or
            keyboard. The following table summarizes keyboard navigation.
            
                Key Combination     DisplayMode     Action
                ARROW               Any             Change focused date, unselect
                                                    all selected dates, and select
                                                    new focused date.
                                                    
                SHIFT+ARROW         Any             If SelectionMode is not set to
                                                    SingleDate or None begin
                                                    selecting a range of dates.
                                                    
                CTRL+UP ARROW       Any             Switch to the next larger
                                                    DisplayMode.  If DisplayMode is
                                                    already Decade, no action.
                                                    
                CTRL+DOWN ARROW     Any             Switch to the next smaller
                                                    DisplayMode.  If DisplayMode is
                                                    already Month, no action.
                                                    
                SPACEBAR            Month           Select focused date.
                
                SPACEBAR            Year or Decade  Switch DisplayMode to the Month
                                                    or Year represented by focused
                                                    item.
            </para>
            <para>
            XAML Usage for Classes Derived from Calendar
            If you define a class that derives from Calendar, the class can be used
            as an object element in XAML, and all of the inherited properties and
            events that show a XAML usage in the reference for the Calendar members
            can have the same XAML usage for the derived class. However, the object
            element itself must have a different prefix mapping than the controls:
            mapping shown in the usages, because the derived class comes from an
            assembly and namespace that you create and define.  You must define your
            own prefix mapping to an XML namespace to use the class as an object
            element in XAML.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.FirstDayOfWeek">
            <summary>
            Gets or sets the day that is considered the beginning of the week.
            </summary>
            <value>
            A <see cref="T:System.DayOfWeek" /> representing the beginning of
            the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.
            </value>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnFirstDayOfWeekChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            FirstDayOfWeekProperty property changed handler.
            </summary>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:Avalonia.Controls.Calendar.IsValidFirstDayOfWeek(System.Object)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="value">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="P:Avalonia.Controls.Calendar.IsTodayHighlighted">
            <summary>
            Gets or sets a value indicating whether the current date is
            highlighted.
            </summary>
            <value>
            True if the current date is highlighted; otherwise, false. The
            default is true.
            </value>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnIsTodayHighlightedChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            IsTodayHighlightedProperty property changed handler.
            </summary>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="P:Avalonia.Controls.Calendar.DisplayMode">
            <summary>
            Gets or sets a value indicating whether the calendar is displayed in
            months, years, or decades.
            </summary>
            <value>
            A value indicating what length of time the
            <see cref="T:System.Windows.Controls.Calendar" /> should display.
            </value>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnDisplayModePropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            DisplayModeProperty property changed handler.
            </summary>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="P:Avalonia.Controls.Calendar.SelectionMode">
            <summary>
            Gets or sets a value that indicates what kind of selections are
            allowed.
            </summary>
            <value>
            A value that indicates the current selection mode. The default is
            <see cref="F:System.Windows.Controls.CalendarSelectionMode.SingleDate" />.
            </value>
            <remarks>
            <para>
            This property determines whether the Calendar allows no selection,
            selection of a single date, or selection of multiple dates.  The
            selection mode is specified with the CalendarSelectionMode
            enumeration.
            </para>
            <para>
            When this property is changed, all selected dates will be cleared.
            </para>
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Calendar.IsValidSelectionMode(System.Object)">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <param name="value">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="P:Avalonia.Controls.Calendar.SelectedDate">
            <summary>
            Gets or sets the currently selected date.
            </summary>
            <value>The date currently selected. The default is null.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given date is outside the range specified by
            <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" />
            and <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" />
            -or-
            The given date is in the
            <see cref="P:System.Windows.Controls.Calendar.BlackoutDates" />
            collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If set to anything other than null when
            <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> is
            set to
            <see cref="F:System.Windows.Controls.CalendarSelectionMode.None" />.
            </exception>
            <remarks>
            Use this property when SelectionMode is set to SingleDate.  In other
            modes, this property will always be the first date in SelectedDates.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.SelectedDates">
            <summary>
            Gets a collection of selected dates.
            </summary>
            <value>
            A <see cref="T:System.Windows.Controls.SelectedDatesCollection" />
            object that contains the currently selected dates. The default is an
            empty collection.
            </value>
            <remarks>
            Dates can be added to the collection either individually or in a
            range using the AddRange method.  Depending on the value of the
            SelectionMode property, adding a date or range to the collection may
            cause it to be cleared.  The following table lists how
            CalendarSelectionMode affects the SelectedDates property.
            
                CalendarSelectionMode   Description
                None                    No selections are allowed.  SelectedDate
                                        cannot be set and no values can be added
                                        to SelectedDates.
                                        
                SingleDate              Only a single date can be selected,
                                        either by setting SelectedDate or the
                                        first value in SelectedDates.  AddRange
                                        cannot be used.
                                        
                SingleRange             A single range of dates can be selected.
                                        Setting SelectedDate, adding a date
                                        individually to SelectedDates, or using
                                        AddRange will clear all previous values
                                        from SelectedDates.
                MultipleRange           Multiple non-contiguous ranges of dates
                                        can be selected. Adding a date
                                        individually to SelectedDates or using
                                        AddRange will not clear SelectedDates.
                                        Setting SelectedDate will still clear
                                        SelectedDates, but additional dates or
                                        range can then be added.  Adding a range
                                        that includes some dates that are
                                        already selected or overlaps with
                                        another range results in the union of
                                        the ranges and does not cause an
                                        exception.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.DisplayDate">
            <summary>
            Gets or sets the date to display.
            </summary>
            <value>The date to display.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given date is not in the range specified by
            <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" />
            and
            <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" />.
            </exception>
            <remarks>
            <para>
            This property allows the developer to specify a date to display.  If
            this property is a null reference (Nothing in Visual Basic),
            SelectedDate is displayed.  If SelectedDate is also a null reference
            (Nothing in Visual Basic), Today is displayed.  The default is
            Today.
            </para>
            <para>
            To set this property in XAML, use a date specified in the format
            yyyy/mm/dd.  The mm and dd components must always consist of two
            characters, with a leading zero if necessary.  For instance, the
            month of May should be specified as 05.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.DisplayDateStart">
            <summary>
            Gets or sets the first date to be displayed.
            </summary>
            <value>The first date to display.</value>
            <remarks>
            To set this property in XAML, use a date specified in the format
            yyyy/mm/dd.  The mm and dd components must always consist of two
            characters, with a leading zero if necessary.  For instance, the
            month of May should be specified as 05.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.BlackoutDates">
            <summary>
            Gets a collection of dates that are marked as not selectable.
            </summary>
            <value>
            A collection of dates that cannot be selected. The default value is
            an empty collection.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Adding a date to this collection when it is already selected or
            adding a date outside the range specified by DisplayDateStart and
            DisplayDateEnd.
            </exception>
            <remarks>
            <para>
            Dates in this collection will appear as disabled on the calendar.
            </para>
            <para>
            To make all past dates not selectable, you can use the
            AddDatesInPast method provided by the collection returned by this
            property.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.DisplayDateEnd">
            <summary>
            Gets or sets the last date to be displayed.
            </summary>
            <value>The last date to display.</value>
            <remarks>
            To set this property in XAML, use a date specified in the format
            yyyy/mm/dd.  The mm and dd components must always consist of two
            characters, with a leading zero if necessary.  For instance, the
            month of May should be specified as 05.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Calendar.DatePickerDisplayDateFlag">
            <summary>
            Gets or sets a value indicating whether DatePicker should change its 
            DisplayDate because of a SelectedDate change on its Calendar.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.HighlightDays">
            <summary>
            This method highlights the days in MultiSelection mode without
            adding them to the SelectedDates collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.UnHighlightDays">
            <summary>
            This method un-highlights the days that were hovered over but not
            added to the SelectedDates collection or un-highlighted the
            previously selected days in SingleRange Mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnDayClick(System.DateTime)">
            <summary>
            If the day is a trailing day, Update the DisplayDate.
            </summary>
            <param name="selectedDate">Inherited code: Requires comment.</param>
        </member>
        <member name="E:Avalonia.Controls.Calendar.DisplayDateChanged">
            <summary>
            Occurs when the
            <see cref="P:System.Windows.Controls.Calendar.DisplayDate" />
            property is changed.
            </summary>
            <remarks>
            This event occurs after DisplayDate is assigned its new value.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.Calendar.DisplayModeChanged">
            <summary>
            Occurs when the
            <see cref="P:System.Windows.Controls.Calendar.DisplayMode" />
            property is changed.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Calendar.DayButtonMouseUp">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.AddSelection">
            <summary>
            This method adds the days that were selected by Keyboard to the
            SelectedDays Collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <summary>
            Default mouse wheel handler for the calendar control.
            </summary>
            <param name="e">Mouse wheel event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnIsEnabledChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
             Called when the IsEnabled property changes.
            </summary>
            <param name="e">Property changed args.</param>
        </member>
        <member name="M:Avalonia.Controls.Calendar.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.Calendar" /> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Calendar.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Calendar" /> when a new
            template is applied.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection._owner">
            <summary>
            The Calendar whose dates this object represents.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.#ctor(Avalonia.Controls.Calendar)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection" />
            class.
            </summary>
            <param name="owner">
            The <see cref="T:Avalonia.Controls.Calendar" /> whose dates
            this object represents.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.AddDatesInPast">
            <summary>
            Adds all dates before <see cref="P:System.DateTime.Today" /> to the
            collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.Contains(System.DateTime)">
            <summary>
            Returns a value that represents whether this collection contains the
            specified date.
            </summary>
            <param name="date">The date to search for.</param>
            <returns>
            True if the collection contains the specified date; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.Contains(System.DateTime,System.DateTime)">
            <summary>
            Returns a value that represents whether this collection contains the
            specified range of dates.
            </summary>
            <param name="start">The start of the date range.</param>
            <param name="end">The end of the date range.</param>
            <returns>
            True if all dates in the range are contained in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.ContainsAny(Avalonia.Controls.CalendarDateRange)">
            <summary>
            Returns a value that represents whether this collection contains any
            date in the specified range.
            </summary>
            <param name="range">The range of dates to search for.</param>
            <returns>
            True if any date in the range is contained in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.InsertItem(System.Int32,Avalonia.Controls.CalendarDateRange)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection.SetItem(System.Int32,Avalonia.Controls.CalendarDateRange)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to replace.
            </param>
            <param name="item">
            The new value for the element at the specified index.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Primitives.CalendarButton">
            <summary>
            Represents a button on a
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarButton._isCalendarButtonFocused">
            <summary>
            A value indicating whether the button is focused.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarButton._isInactive">
            <summary>
            A value indicating whether the button is inactive.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarButton._isSelected">
            <summary>
            A value indicating whether the button is selected.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Primitives.CalendarButton" />
            class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarButton.Owner">
            <summary>
            Gets or sets the Calendar associated with this button.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarButton.IsCalendarButtonFocused">
            <summary>
            Gets or sets a value indicating whether the button is focused.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarButton.IsInactive">
            <summary>
            Gets or sets a value indicating whether the button is inactive.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarButton.IsSelected">
            <summary>
            Gets or sets a value indicating whether the button is selected.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Primitives.CalendarButton" />
            when a new template is applied.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.SetPseudoClasses">
            <summary>
            Sets PseudoClasses based on current state.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.CalendarButton.CalendarLeftMouseButtonDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the
            stylus touches the tablet PC) while the mouse pointer is over a
            UIElement.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.CalendarButton.CalendarLeftMouseButtonUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the
            stylus is removed from the tablet PC) while the mouse (or the
            stylus) is over a UIElement (or while a UIElement holds mouse
            capture).
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Provides class handling for the MouseLeftButtonDown event that
            occurs when the left mouse button is pressed while the mouse pointer
            is over this control.
            </summary>
            <param name="e">The event data. </param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonDown event as handled by
            setting the MouseButtonEventArgs.Handled property of the event data
            to true when the button is enabled and its ClickMode is not set to
            Hover.  Since this method marks the MouseLeftButtonDown event as
            handled in some situations, you should use the Click event instead
            to detect a button click.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonUp event that occurs when
            the left mouse button is released while the mouse pointer is over
            this control. 
            </summary>
            <param name="e">The event data.</param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonUp event as handled by setting
            the MouseButtonEventArgs.Handled property of the event data to true
            when the button is enabled and its ClickMode is not set to Hover.
            Since this method marks the MouseLeftButtonUp event as handled in
            some situations, you should use the Click event instead to detect a
            button click.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarButton.SendMouseLeftButtonUp(Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            We need to simulate the MouseLeftButtonUp event for the
            CalendarButton that stays in Pressed state after MouseCapture is
            released since there is no actual MouseLeftButtonUp event for the
            release.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarDayButton.DefaultContent">
            <summary>
            Default content for the CalendarDayButton.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarDayButton.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Primitives.CalendarDayButton" />
            class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.Owner">
            <summary>
            Gets or sets the Calendar associated with this button.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.IsCurrent">
            <summary>
            Gets or sets a value indicating whether the button is the focused
            element on the Calendar control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarDayButton.IgnoreMouseOverState">
            <summary>
            Ensure the button is not in the MouseOver state.
            </summary>
            <remarks>
            If a button is in the MouseOver state when a Popup is closed (as is
            the case when you select a date in the DatePicker control), it will
            continue to think it's in the mouse over state even when the Popup
            opens again and it's not.  This method is used to forcibly clear the
            state by changing the CommonStates state group.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.IsBlackout">
            <summary>
            Gets or sets a value indicating whether this is a blackout date.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.IsToday">
            <summary>
            Gets or sets a value indicating whether this button represents
            today.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.IsInactive">
            <summary>
            Gets or sets a value indicating whether the button is inactive.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarDayButton.IsSelected">
            <summary>
            Gets or sets a value indicating whether the button is selected.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the
            stylus touches the tablet PC) while the mouse pointer is over a
            UIElement.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the
            stylus is removed from the tablet PC) while the mouse (or the
            stylus) is over a UIElement (or while a UIElement holds mouse
            capture).
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarDayButton.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Provides class handling for the MouseLeftButtonDown event that
            occurs when the left mouse button is pressed while the mouse pointer
            is over this control.
            </summary>
            <param name="e">The event data. </param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonDown event as handled by
            setting the MouseButtonEventArgs.Handled property of the event data
            to true when the button is enabled and its ClickMode is not set to
            Hover.  Since this method marks the MouseLeftButtonDown event as
            handled in some situations, you should use the Click event instead
            to detect a button click.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarDayButton.OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonUp event that occurs when
            the left mouse button is released while the mouse pointer is over
            this control. 
            </summary>
            <param name="e">The event data.</param>
            <exception cref="T:System.ArgumentNullException">
            e is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            This method marks the MouseLeftButtonUp event as handled by setting
            the MouseButtonEventArgs.Handled property of the event data to true
            when the button is enabled and its ClickMode is not set to Hover.
            Since this method marks the MouseLeftButtonUp event as handled in
            some situations, you should use the Click event instead to detect a
            button click.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarDayButton.SendMouseLeftButtonUp(Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            We need to simulate the MouseLeftButtonUp event for the
            CalendarDayButton that stays in Pressed state after MouseCapture is
            released since there is no actual MouseLeftButtonUp event for the
            release.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.CalendarItem">
            <summary>
            Represents the currently displayed month or year on a
            <see cref="T:Avalonia.Controls.Calendar" />.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.CalendarItem.NumberOfDaysPerWeek">
            <summary>
            The number of days per week.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarItem.HeaderButton">
            <summary>
            Gets the button that allows switching between month mode, year mode,
            and decade mode. 
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarItem.NextButton">
            <summary>
            Gets the button that displays the next page of the calendar when it
            is clicked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarItem.PreviousButton">
            <summary>
            Gets the button that displays the previous page of the calendar when
            it is clicked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarItem.MonthView">
            <summary>
            Gets the Grid that hosts the content when in month mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.CalendarItem.YearView">
            <summary>
            Gets the Grid that hosts the content when in year or decade mode.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarItem.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Primitives.CalendarItem" />
            when a new template is applied.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.CalendarItem.PreviousMonthDays(System.DateTime)">
            <summary>
            How many days of the previous month need to be displayed.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectedDatesCollection._addedItems">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectedDatesCollection._isCleared">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectedDatesCollection._isRangeAdded">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectedDatesCollection._owner">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.#ctor(Avalonia.Controls.Calendar)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Primitives.SelectedDatesCollection" />
            class.
            </summary>
            <param name="owner">
            The <see cref="T:Avalonia.Controls.Calendar" /> associated
            with this object.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.AddRange(System.DateTime,System.DateTime)">
            <summary>
            Adds all the dates in the specified range, which includes the first
            and last dates, to the collection.
            </summary>
            <param name="start">The first date to add to the collection.</param>
            <param name="end">The last date to add to the collection.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.InsertItem(System.Int32,System.DateTime)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectedDatesCollection.SetItem(System.Int32,System.DateTime)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to replace.
            </param>
            <param name="item">
            The new value for the element at the specified index.
            </param>
            <remarks>
            This implementation raises the CollectionChanged event.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Primitives.IScrollable">
            <summary>
            Interface implemented by scrollable controls.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollable.Extent">
            <summary>
            Gets the extent of the scrollable content, in logical units
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollable.Offset">
            <summary>
            Gets or sets the current scroll offset, in logical units.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollable.Viewport">
            <summary>
            Gets the size of the viewport, in logical units.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.AccessText">
            <summary>
            A text block that displays a character prefixed with an underscore as an access key.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.AccessText.ShowAccessKeyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.AccessText.ShowAccessKey"/> attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.AccessText._accessKeys">
            <summary>
            The access key handler for the current window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.AccessText"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.AccessText"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.AccessText.AccessKey">
            <summary>
            Gets the access key.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.AccessText.ShowAccessKey">
            <summary>
            Gets or sets a value indicating whether the access key should be underlined.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the <see cref="T:Avalonia.Controls.Primitives.AccessText"/> to a drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.CreateFormattedText(Avalonia.Size,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size for the control.</param>
            <returns>The desired size.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.StripAccessKey(System.String)">
            <summary>
            Returns a string with the first underscore stripped.
            </summary>
            <param name="text">The text.</param>
            <returns>The text with the first underscore stripped.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.TextChanged(System.String)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.TextBlock.Text"/> property changes.
            </summary>
            <param name="text">The new text.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.HeaderedContentControl">
            <summary>
            A <see cref="T:Avalonia.Controls.ContentControl"/> with a header.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedContentControl.Header"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderTemplate"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedContentControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedContentControl.Header">
            <summary>
            Gets or sets the header content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderPresenter">
            <summary>
            Gets the header presenter from the control's template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderTemplate">
            <summary>
            Gets or sets the data template used to display the header content of the control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedContentControl.RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Primitives.HeaderedItemsControl">
            <summary>
            Represents an <see cref="T:Avalonia.Controls.ItemsControl"/> with a related header.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedItemsControl.HeaderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedItemsControl.Header"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedItemsControl.Header">
            <summary>
            Gets or sets the content of the control's header.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedItemsControl.HeaderPresenter">
            <summary>
            Gets the header presenter from the control's template.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedItemsControl.Avalonia#Controls#Presenters#IContentPresenterHost#RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedItemsControl.RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter)">
            <summary>
            Called when an <see cref="T:Avalonia.Controls.Presenters.IContentPresenter"/> is registered with the control.
            </summary>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl">
            <summary>
            Represents a <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> with a related header.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.HeaderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Header"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Header">
            <summary>
            Gets or sets the content of the control's header.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.HeaderPresenter">
            <summary>
            Gets the header presenter from the control's template.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Avalonia#Controls#Presenters#IContentPresenterHost#RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter)">
            <summary>
            Called when an <see cref="T:Avalonia.Controls.Presenters.IContentPresenter"/> is registered with the control.
            </summary>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.ILogicalScrollable">
            <summary>
            Interface implemented by controls that handle their own scrolling when placed inside a 
            <see cref="T:Avalonia.Controls.ScrollViewer"/>.
            </summary>
            <remarks>
            Controls that implement this interface, when placed inside a <see cref="T:Avalonia.Controls.ScrollViewer"/>
            can override the physical scrolling behavior of the scroll viewer with logical scrolling.
            Physical scrolling means that the scroll viewer is a simple viewport onto a larger canvas
            whereas logical scrolling means that the scrolling is handled by the child control itself
            and it can choose to do handle the scroll information as it sees fit.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.CanHorizontallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.CanVerticallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.IsLogicalScrollEnabled">
            <summary>
            Gets a value indicating whether logical scrolling is enabled on the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.InvalidateScroll">
            <summary>
            Gets or sets the scroll invalidation method.
            </summary>
            <remarks>
            <para>
            This method notifies the attached <see cref="T:Avalonia.Controls.ScrollViewer"/> of a change in 
            the <see cref="P:Avalonia.Controls.Primitives.IScrollable.Extent"/>, <see cref="P:Avalonia.Controls.Primitives.IScrollable.Offset"/> or 
            <see cref="P:Avalonia.Controls.Primitives.IScrollable.Viewport"/> properties.
            </para>
            <para>
            This property is set by the parent <see cref="T:Avalonia.Controls.ScrollViewer"/> when the 
            <see cref="T:Avalonia.Controls.Primitives.ILogicalScrollable"/> is placed inside it.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.ScrollSize">
            <summary>
            Gets the size to scroll by, in logical units.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.PageScrollSize">
            <summary>
            Gets the size to page by, in logical units.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ILogicalScrollable.BringIntoView(Avalonia.Controls.IControl,Avalonia.Rect)">
            <summary>
            Attempts to bring a portion of the target visual into view by scrolling the content.
            </summary>
            <param name="target">The target visual.</param>
            <param name="targetRect">The portion of the target visual to bring into view.</param>
            <returns>True if the scroll offset was changed; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ILogicalScrollable.GetControlInDirection(Avalonia.Input.NavigationDirection,Avalonia.Controls.IControl)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.Popup">
            <summary>
            Displays a popup window.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.Child"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.IsOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.IsOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.ObeyScreenEdgesProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.ObeyScreenEdges"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.HorizontalOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.HorizontalOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.VerticalOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.VerticalOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementTargetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.StaysOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.StaysOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.TopmostProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.Topmost"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.Popup"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.Popup.Closed">
            <summary>
            Raised when the popup closes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.Popup.Opened">
            <summary>
            Raised when the popup opens.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.Popup.PopupRootCreated">
            <summary>
            Raised when the popup root has been created, but before it has been shown.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.Child">
            <summary>
            Gets or sets the control to display in the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.DependencyResolver">
            <summary>
            Gets or sets a dependency resolver for the <see cref="P:Avalonia.Controls.Primitives.Popup.PopupRoot"/>.
            </summary>
            <remarks>
            This property allows a client to customize the behaviour of the popup by injecting
            a specialized dependency resolver into the <see cref="P:Avalonia.Controls.Primitives.Popup.PopupRoot"/>'s constructor.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.IsOpen">
            <summary>
            Gets or sets a value indicating whether the popup is currently open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PlacementMode">
            <summary>
            Gets or sets the placement mode of the popup in relation to the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.ObeyScreenEdges">
            <summary>
            Gets or sets a value indicating whether the popup positions itself within the nearest screen boundary
            when its opened at a position where it would otherwise overlap the screen edge.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.HorizontalOffset">
            <summary>
            Gets or sets the Horizontal offset of the popup in relation to the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.VerticalOffset">
            <summary>
            Gets or sets the Vertical offset of the popup in relation to the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PlacementTarget">
            <summary>
            Gets or sets the control that is used to determine the popup's position.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PopupRoot">
            <summary>
            Gets the root of the popup window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.StaysOpen">
            <summary>
            Gets or sets a value indicating whether the popup should stay open when the popup is
            pressed or loses focus.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.Topmost">
            <summary>
            Gets or sets whether this popup appears on top of all other windows
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.Avalonia#VisualTree#IVisualTreeHost#Root">
            <summary>
            Gets the root of the popup window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.Open">
            <summary>
            Opens the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.Close">
            <summary>
            Closes the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.MeasureCore(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size for the control.</param>
            <returns>A size of 0,0 as Popup itself takes up no space.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.IsOpenChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.Popup.IsOpen"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.ChildChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.Popup.Child"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.GetPosition">
            <summary>
            Gets the position for the popup based on the placement properties.
            </summary>
            <returns>The popup's position in screen coordinates.</returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PopupRoot">
            <summary>
            The root window of a <see cref="T:Avalonia.Controls.Primitives.Popup"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.#ctor(Avalonia.IAvaloniaDependencyResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/> class.
            </summary>
            <param name="dependencyResolver">
            The dependency resolver to use. If null the default dependency resolver will be used.
            </param>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.PlatformImpl">
            <summary>
            Gets the platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.Avalonia#Interactivity#IInteractive#InteractiveParent">
            <summary>
            Gets the parent control in the event route.
            </summary>
            <remarks>
            Popup events are passed to their parent window. This facilitates this.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.Avalonia#VisualTree#IHostedVisualTreeRoot#Host">
            <summary>
            Gets the control that is hosting the popup root.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.Avalonia#Styling#IStyleHost#StylingParent">
            <summary>
            Gets the styling parent of the popup root.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.SnapInsideScreenEdges">
            <summary>
            Moves the Popups position so that it doesnt overlap screen edges.
            This method can be called immediately after Show has been called.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Primitives.RangeBase">
            <summary>
            Base class for controls that display a value within a range.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.MinimumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Minimum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.MaximumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Maximum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.ValueProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.SmallChangeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.SmallChange"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.LargeChangeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.LargeChange"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.RangeBase"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.ValidateDouble(System.Double,System.String)">
            <summary>
            Throws an exception if the double value is NaN or Inf.
            </summary>
            <param name="value">The value.</param>
            <param name="property">The name of the property being set.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.ValidateMinimum(System.Double)">
            <summary>
            Validates the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Minimum"/> property.
            </summary>
            <param name="value">The value.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.ValidateMaximum(System.Double)">
            <summary>
            Validates/coerces the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Maximum"/> property.
            </summary>
            <param name="value">The value.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.ValidateValue(System.Double)">
            <summary>
            Validates/coerces the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value"/> property.
            </summary>
            <param name="value">The value.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.ScrollBar">
            <summary>
            A scrollbar control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.ViewportSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.ViewportSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.Visibility"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.Orientation"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ScrollBar.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.ScrollBar"/> class. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.ScrollBar"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.ViewportSize">
            <summary>
            Gets or sets the amount of the scrollable content that is currently visible.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.Visibility">
            <summary>
            Gets or sets a value that indicates whether the scrollbar should hide itself when it
            is not needed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.Orientation">
            <summary>
            Gets or sets the orientation of the scrollbar.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ScrollBar.CalculateIsVisible">
            <summary>
            Calculates whether the scrollbar should be visible.
            </summary>
            <returns>The scrollbar's visibility.</returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.ScrollEventType">
            <summary>    
            Specifies the type of Avalonia.Controls.Primitives.ScrollBar.Scroll event
            that occurred.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.SmallDecrement">
            <summary>    
            Specifies that the Avalonia.Controls.Primitives.Thumb moved a specified
            distance, as determined by the value of Avalonia.Controls.Primitives.RangeBase.SmallChange.
            The Avalonia.Controls.Primitives.Thumb moved to the left for a horizontal
            Avalonia.Controls.Primitives.ScrollBar or upward for a vertical Avalonia.Controls.Primitives.ScrollBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.SmallIncrement">
            <summary>    
            Specifies that the Avalonia.Controls.Primitives.Thumb moved a specified
            distance, as determined by the value of Avalonia.Controls.Primitives.RangeBase.SmallChange.
            The Avalonia.Controls.Primitives.Thumb moved to the right for a horizontal
            Avalonia.Controls.Primitives.ScrollBar or downward for a vertical Avalonia.Controls.Primitives.ScrollBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.LargeDecrement">
            <summary>    
            Specifies that the Avalonia.Controls.Primitives.Thumb moved a specified
            distance, as determined by the value of Avalonia.Controls.Primitives.RangeBase.LargeChange.
            The Avalonia.Controls.Primitives.Thumb moved to the left for a horizontal
            Avalonia.Controls.Primitives.ScrollBar or upward for a vertical Avalonia.Controls.Primitives.ScrollBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.LargeIncrement">
            <summary>    
            Specifies that the Avalonia.Controls.Primitives.Thumb moved a specified
            distance, as determined by the value of Avalonia.Controls.Primitives.RangeBase.LargeChange.
            The Avalonia.Controls.Primitives.Thumb moved to the right for a horizontal
            Avalonia.Controls.Primitives.ScrollBar or downward for a vertical Avalonia.Controls.Primitives.ScrollBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.ThumbTrack">
            <summary>    
            The Avalonia.Controls.Primitives.Thumb was dragged and caused a Avalonia.UIElement.MouseMove
            event. A Avalonia.Controls.Primitives.ScrollBar.Scroll event of this Avalonia.Controls.Primitives.ScrollEventType
            may occur more than one time when the Avalonia.Controls.Primitives.Thumb
            is dragged in the Avalonia.Controls.Primitives.ScrollBar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollEventType.EndScroll">
            <summary>    
            Specifies that the Avalonia.Controls.Primitives.Thumb was dragged to a
            new position and is now no longer being dragged by the user.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.SelectingItemsControl">
            <summary>
            An <see cref="T:Avalonia.Controls.ItemsControl"/> that maintains a selection.
            </summary>
            <remarks>
            <para>
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> provides a base class for <see cref="T:Avalonia.Controls.ItemsControl"/>s
            that maintain a selection (single or multiple). By default only its 
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex"/> and <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItem"/> properties are visible; the
            current multiple selection <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> together with the 
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> properties are protected, however a derived  class can expose 
            these if it wishes to support multiple selection.
            </para>
            <para>
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> maintains a selection respecting the current 
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> but it does not react to user input; this must be handled in a
            derived class. It does, however, respond to <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/> events
            from items and updates the selection accordingly.
            </para>
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.AutoScrollToSelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.AutoScrollToSelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndexProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent">
            <summary>
            Event that should be raised by items that implement <see cref="T:Avalonia.Controls.ISelectable"/> to
            notify the parent <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> that their selection state
            has changed.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged">
            <summary>
            Occurs when the control's selection changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.AutoScrollToSelectedItem">
            <summary>
            Gets or sets a value indicating whether to automatically scroll to newly selected items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.AlwaysSelected">
            <summary>
            Gets a value indicating whether <see cref="F:Avalonia.Controls.SelectionMode.AlwaysSelected"/> is set.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.BeginInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.EndInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.GetContainerFromEventSource(Avalonia.Interactivity.IInteractive)">
            <summary>
            Tries to get the container that was the source of an event.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <returns>The container or null if the event did not originate in a container.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ItemsChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnContainersMaterialized(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnContainersDematerialized(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnDataContextBeginUpdate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnDataContextEndUpdate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MoveSelection(Avalonia.Input.NavigationDirection,System.Boolean)">
            <summary>
            Moves the selection in the specified direction relative to the current selection.
            </summary>
            <param name="direction">The direction to move.</param>
            <param name="wrap">Whether to wrap when the selection reaches the first or last item.</param>
            <returns>True if the selection was moved; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MoveSelection(Avalonia.Controls.IControl,Avalonia.Input.NavigationDirection,System.Boolean)">
            <summary>
            Moves the selection in the specified direction relative to the specified container.
            </summary>
            <param name="from">The container which serves as a starting point for the movement.</param>
            <param name="direction">The direction to move.</param>
            <param name="wrap">Whether to wrap when the selection reaches the first or last item.</param>
            <returns>True if the selection was moved; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UpdateSelection(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection for an item based on user interaction.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="select">Whether the item should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UpdateSelection(Avalonia.Controls.IControl,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection for a container based on user interaction.
            </summary>
            <param name="container">The container.</param>
            <param name="select">Whether the container should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UpdateSelectionFromEventSource(Avalonia.Interactivity.IInteractive,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection based on an event that may have originated in a container that
            belongs to the control.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <param name="select">Whether the container should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
            <returns>
            True if the event originated from a container that belongs to the control; otherwise
            false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.SynchronizeItems(System.Collections.IList,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Makes a list of objects equal another.
            </summary>
            <param name="items">The items collection.</param>
            <param name="desired">The desired items.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.GetRange(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Gets a range of items from an IEnumerable.
            </summary>
            <param name="items">The items.</param>
            <param name="first">The index of the first item.</param>
            <param name="last">The index of the last item.</param>
            <returns>The items.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ContainerSelectionChanged(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a container raises the <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/>.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.LostSelection">
            <summary>
            Called when the currently selected item is lost and the selection must be changed
            depending on the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MarkContainerSelected(Avalonia.Controls.IControl,System.Boolean)">
            <summary>
            Sets a container's 'selected' class or <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/>.
            </summary>
            <param name="container">The container.</param>
            <param name="selected">Whether the control is selected</param>
            <returns>The previous selection state.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MarkItemSelected(System.Int32,System.Boolean)">
            <summary>
            Sets an item container's 'selected' class or <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/>.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="selected">Whether the item should be selected or deselected.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MarkItemSelected(System.Object,System.Boolean)">
            <summary>
            Sets an item container's 'selected' class or <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/>.
            </summary>
            <param name="item">The item.</param>
            <param name="selected">Whether the item should be selected or deselected.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> CollectionChanged event is raised.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItemsAdded(System.Collections.IList)">
            <summary>
            Called when items are added to the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> collection.
            </summary>
            <param name="items">The added items.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.SubscribeToSelectedItems">
            <summary>
            Subscribes to the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> CollectionChanged event, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UnsubscribeFromSelectedItems">
            <summary>
            Unsubscribes from the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> CollectionChanged event, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TabStrip.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TabStrip.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Primitives.TabStripItem">
            <summary>
            Represents a tab in a <see cref="T:Avalonia.Controls.Primitives.TabStrip"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.TemplateAppliedEventArgs">
            <summary>
            Holds the details of the <see cref="E:Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplateAppliedEventArgs.#ctor(Avalonia.Controls.INameScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.TemplateAppliedEventArgs"/> class.
            </summary>
            <param name="nameScope">The applied template's name scope.</param>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplateAppliedEventArgs.NameScope">
            <summary>
            Gets the name scope of the applied template.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.TemplatedControl">
            <summary>
            A lookless control whose visual appearance is defined by its <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Template"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.BorderBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.BorderBrush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.BorderThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.BorderThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontFamilyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontFamily"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontWeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.ForegroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Foreground"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.PaddingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Padding"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.TemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Template"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.IsTemplateFocusTargetProperty">
            <summary>
            Defines the IsTemplateFocusTarget attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.TemplateAppliedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied"/> routed event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied">
            <summary>
            Raised when the control's template is applied.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Background">
            <summary>
            Gets or sets the brush used to draw the control's background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.BorderBrush">
            <summary>
            Gets or sets the brush used to draw the control's border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.BorderThickness">
            <summary>
            Gets or sets the thickness of the control's border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontFamily">
            <summary>
            Gets or sets the font family used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontSize">
            <summary>
            Gets or sets the size of the control's text in points.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontStyle">
            <summary>
            Gets or sets the font style used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontWeight">
            <summary>
            Gets or sets the font weight used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Foreground">
            <summary>
            Gets or sets the brush used to draw the control's text and other foreground elements.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Padding">
            <summary>
            Gets or sets the padding placed between the border of the control and its content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Template">
            <summary>
            Gets or sets the template that defines the control's appearance.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.GetIsTemplateFocusTarget(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the IsTemplateFocusTargetProperty attached property on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The property value.</returns>
            <see cref="M:Avalonia.Controls.Primitives.TemplatedControl.SetIsTemplateFocusTarget(Avalonia.Controls.Control,System.Boolean)"/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.SetIsTemplateFocusTarget(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Sets the value of the IsTemplateFocusTargetProperty attached property on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value.</param>
            <remarks>
            When a control is navigated to using the keyboard, a focus adorner is shown - usually
            around the control itself. However if the TemplatedControl.IsTemplateFocusTarget 
            attached property is set to true on an element in the control template, then the focus
            adorner will be shown around that control instead.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.ApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.GetTemplateFocusTarget">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Called when the control's template is applied.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnTemplateChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Template"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.ApplyTemplatedParent(Avalonia.Controls.IControl)">
            <summary>
            Sets the TemplatedParent property for the created template children.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.RegisterNames(Avalonia.Controls.IControl,Avalonia.Controls.INameScope)">
            <summary>
            Registers each control with its name scope.
            </summary>
            <param name="control">The control.</param>
            <param name="nameScope">The name scope.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.UniformGrid">
            <summary>
            A <see cref="T:Avalonia.Controls.Panel"/> with uniform column and row sizes.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.UniformGrid.RowsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.UniformGrid.Rows"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.UniformGrid.Columns"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.UniformGrid.FirstColumn"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.UniformGrid.Rows">
            <summary>
            Specifies the row count. If set to 0, row count will be calculated automatically.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.UniformGrid.Columns">
            <summary>
            Specifies the column count. If set to 0, column count will be calculated automatically.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.UniformGrid.FirstColumn">
            <summary>
            Specifies, for the first row, the column where the items should start.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.CalendarDateRange.Start">
            <summary>
            Gets the first date in the represented range.
            </summary>
            <value>The first date in the represented range.</value>
        </member>
        <member name="P:Avalonia.Controls.CalendarDateRange.End">
            <summary>
            Gets the last date in the represented range.
            </summary>
            <value>The last date in the represented range.</value>
        </member>
        <member name="M:Avalonia.Controls.CalendarDateRange.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.CalendarDateRange" /> class
            with a single date.
            </summary>
            <param name="day">The date to be represented by the range.</param>
        </member>
        <member name="M:Avalonia.Controls.CalendarDateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.CalendarDateRange" /> class
            with a range of dates.
            </summary>
            <param name="start">
            The start of the range to be represented.
            </param>
            <param name="end">The end of the range to be represented.</param>
        </member>
        <member name="M:Avalonia.Controls.CalendarDateRange.ContainsAny(Avalonia.Controls.CalendarDateRange)">
            <summary>
            Returns true if any day in the given DateTime range is contained in
            the current CalendarDateRange.
            </summary>
            <param name="range">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="T:Avalonia.Controls.DatePickerDateValidationErrorEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Avalonia.Controls.DatePicker.DateValidationError" />
            event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DatePickerDateValidationErrorEventArgs.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.DatePickerDateValidationErrorEventArgs" />
            class.
            </summary>
            <param name="exception">
            The initial exception from the
            <see cref="E:Avalonia.Controls.DatePicker.DateValidationError" />
            event.
            </param>
            <param name="text">
            The text that caused the
            <see cref="E:Avalonia.Controls.DatePicker.DateValidationError" />
            event.
            </param>
        </member>
        <member name="P:Avalonia.Controls.DatePickerDateValidationErrorEventArgs.Exception">
            <summary>
            Gets the initial exception associated with the
            <see cref="E:Avalonia.Controls.DatePicker.DateValidationError" />
            event.
            </summary>
            <value>
            The exception associated with the validation failure.
            </value>
        </member>
        <member name="P:Avalonia.Controls.DatePickerDateValidationErrorEventArgs.Text">
            <summary>
            Gets the text that caused the
            <see cref="E:Avalonia.Controls.DatePicker.DateValidationError" />
            event.
            </summary>
            <value>
            The text that caused the validation failure.
            </value>
        </member>
        <member name="P:Avalonia.Controls.DatePickerDateValidationErrorEventArgs.ThrowException">
            <summary>
            Gets or sets a value indicating whether
            <see cref="P:Avalonia.Controls.DatePickerDateValidationErrorEventArgs.Exception" />
            should be thrown.
            </summary>
            <value>
            True if the exception should be thrown; otherwise, false.
            </value>
            <exception cref="T:System.ArgumentException">
            If set to true and
            <see cref="P:Avalonia.Controls.DatePickerDateValidationErrorEventArgs.Exception" />
            is null.
            </exception>
        </member>
        <member name="T:Avalonia.Controls.DatePickerFormat">
            <summary>
            Specifies date formats for a
            <see cref="T:Avalonia.Controls.DatePicker" />.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerFormat.Long">
            <summary>
            Specifies that the date should be displayed using unabbreviated days
            of the week and month names.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerFormat.Short">
            <summary>
            Specifies that the date should be displayed using abbreviated days
            of the week and month names.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DatePickerFormat.Custom">
            <summary>
            Specifies that the date should be displayed using a custom format string.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.BlackoutDates">
            <summary>
            Gets a collection of dates that are marked as not selectable.
            </summary>
            <value>
            A collection of dates that cannot be selected. The default value is
            an empty collection.
            </value>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.DisplayDate">
            <summary>
            Gets or sets the date to display.
            </summary>
            <value>
            The date to display. The default 
            <see cref="P:System.DateTime.Today" />.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified date is not in the range defined by
            <see cref="P:Avalonia.Controls.DatePicker.DisplayDateStart" />
            and
            <see cref="P:Avalonia.Controls.DatePicker.DisplayDateEnd" />.
            </exception>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.DisplayDateStart">
            <summary>
            Gets or sets the first date to be displayed.
            </summary>
            <value>The first date to display.</value>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.DisplayDateEnd">
            <summary>
            Gets or sets the last date to be displayed.
            </summary>
            <value>The last date to display.</value>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.FirstDayOfWeek">
            <summary>
            Gets or sets the day that is considered the beginning of the week.
            </summary>
            <value>
            A <see cref="T:System.DayOfWeek" /> representing the beginning of
            the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.
            </value>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down
            <see cref="T:Avalonia.Controls.Calendar" /> is open or closed.
            </summary>
            <value>
            True if the <see cref="T:Avalonia.Controls.Calendar" /> is
            open; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.IsTodayHighlighted">
            <summary>
            Gets or sets a value indicating whether the current date will be
            highlighted.
            </summary>
            <value>
            True if the current date is highlighted; otherwise, false. The
            default is true.
            </value>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.SelectedDate">
            <summary>
            Gets or sets the currently selected date.
            </summary>
            <value>
            The date currently selected. The default is null.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified date is not in the range defined by
            <see cref="P:Avalonia.Controls.DatePicker.DisplayDateStart" />
            and
            <see cref="P:Avalonia.Controls.DatePicker.DisplayDateEnd" />,
            or the specified date is in the
            <see cref="P:Avalonia.Controls.DatePicker.BlackoutDates" />
            collection.
            </exception>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.SelectedDateFormat">
            <summary>
            Gets or sets the format that is used to display the selected date.
            </summary>
            <value>
            The format that is used to display the selected date. The default is
            <see cref="F:Avalonia.Controls.DatePickerFormat.Short" />.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An specified format is not valid.
            </exception>
        </member>
        <member name="P:Avalonia.Controls.DatePicker.Text">
            <summary>
            Gets or sets the text that is displayed by the
            <see cref="T:Avalonia.Controls.DatePicker" />.
            </summary>
            <value>
            The text displayed by the
            <see cref="T:Avalonia.Controls.DatePicker" />.
            </value>
            <exception cref="T:System.FormatException">
            The text entered cannot be parsed to a valid date, and the exception
            is not suppressed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The text entered parses to a date that is not selectable.
            </exception>
        </member>
        <member name="E:Avalonia.Controls.DatePicker.CalendarClosed">
            <summary>
            Occurs when the drop-down
            <see cref="T:Avalonia.Controls.Calendar" /> is closed.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DatePicker.CalendarOpened">
            <summary>
            Occurs when the drop-down
            <see cref="T:Avalonia.Controls.Calendar" /> is opened.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DatePicker.DateValidationError">
            <summary>
            Occurs when <see cref="P:Avalonia.Controls.DatePicker.Text" />
            is assigned a value that cannot be interpreted as a date.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.DatePicker.SelectedDateChanged">
            <summary>
            Occurs when the
            <see cref="P:Avalonia.Controls.DatePicker.SelectedDate" />
            property is changed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DatePicker.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.DatePicker" /> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DatePicker.OnDateValidationError(Avalonia.Controls.DatePickerDateValidationErrorEventArgs)">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.DatePicker.DateValidationError" />
            event.
            </summary>
            <param name="e">
            A
            <see cref="T:Avalonia.Controls.DatePickerDateValidationErrorEventArgs" />
            that contains the event data.
            </param>
        </member>
        <member name="M:Avalonia.Controls.DatePicker.ParseText(System.String)">
            <summary>
            Input text is parsed in the correct format and changed into a
            DateTime object.  If the text can not be parsed TextParseError Event
            is thrown.
            </summary>
            <param name="text">Inherited code: Requires comment.</param>
            <returns>
            IT SHOULD RETURN NULL IF THE STRING IS NOT VALID, RETURN THE
            DATETIME VALUE IF IT IS VALID.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Canvas">
            <summary>
            A panel that displays child controls at arbitrary locations.
            </summary>
            <remarks>
            Unlike other <see cref="T:Avalonia.Controls.Panel"/> implementations, the <see cref="T:Avalonia.Controls.Canvas"/> doesn't lay out
            its children in any particular layout. Instead, the positioning of each child control is
            defined by the <code>Canvas.Left</code>, <code>Canvas.Top</code>, <code>Canvas.Right</code>
            and <code>Canvas.Bottom</code> attached properties.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Canvas.LeftProperty">
            <summary>
            Defines the Left attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Canvas.TopProperty">
            <summary>
            Defines the Top attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Canvas.RightProperty">
            <summary>
            Defines the Right attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Canvas.BottomProperty">
            <summary>
            Defines the Bottom attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Canvas.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Canvas"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetLeft(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Left attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's left coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetLeft(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Left attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The left value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetTop(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Top attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's top coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetTop(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Top attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The top value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetRight(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Right attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's right coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetRight(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Right attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The right value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetBottom(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Bottom attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's bottom coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetBottom(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Bottom attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The bottom value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.Avalonia#Input#INavigableContainer#GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement,System.Boolean)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <param name="wrap">Whether to wrap around when the first or last item is reached.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the control's children.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="T:Avalonia.Controls.Carousel">
            <summary>
            An items control that displays its items as pages that fill the control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Carousel.IsVirtualizedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Carousel.IsVirtualized"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Carousel.PageTransitionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Carousel.PageTransition"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Carousel.PanelTemplate">
            <summary>
            The default value of <see cref="F:Avalonia.Controls.ItemsControl.ItemsPanelProperty"/> for 
            <see cref="T:Avalonia.Controls.Carousel"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Carousel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Carousel.IsVirtualized">
            <summary>
            Gets or sets a value indicating whether the items in the carousel are virtualized.
            </summary>
            <remarks>
            When the carousel is virtualized, only the active page is held in memory.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Carousel.PageTransition">
            <summary>
            Gets or sets the transition to use when moving between pages.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.Next">
            <summary>
            Moves to the next item in the carousel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.Previous">
            <summary>
            Moves to the previous item in the carousel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Carousel.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.CheckBox">
            <summary>
            A check box control.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ColumnDefinition">
            <summary>
            Holds a column definitions for a <see cref="T:Avalonia.Controls.Grid"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ColumnDefinition.MaxWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ColumnDefinition.MaxWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ColumnDefinition.MinWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ColumnDefinition.MinWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ColumnDefinition.WidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ColumnDefinition.Width"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinition"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinition.#ctor(System.Double,Avalonia.Controls.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinition"/> class.
            </summary>
            <param name="value">The width of the column.</param>
            <param name="type">The width unit of the column.</param>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinition.#ctor(Avalonia.Controls.GridLength)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinition"/> class.
            </summary>
            <param name="width">The width of the column.</param>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.ActualWidth">
            <summary>
            Gets the actual calculated width of the column.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.MaxWidth">
            <summary>
            Gets or sets the maximum width of the column in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.MinWidth">
            <summary>
            Gets or sets the minimum width of the column in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.Width">
            <summary>
            Gets or sets the width of the column.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ColumnDefinitions">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.ColumnDefinition"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinitions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinitions"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinitions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinitions"/> class.
            </summary>
            <param name="s">A string representation of the column definitions.</param>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinitions.Parse(System.String)">
            <summary>
            Parses a string representation of column definitions collection.
            </summary>
            <param name="s">The column definitions string.</param>
            <returns>The <see cref="T:Avalonia.Controls.ColumnDefinitions"/>.</returns>
        </member>
        <member name="T:Avalonia.Controls.ComboBox">
            <summary>
            A drop-down list control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.IsDropDownOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.IsDropDownOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.MaxDropDownHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.MaxDropDownHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.SelectionBoxItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.SelectionBoxItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ComboBox.VirtualizationModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ComboBox.VirtualizationMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ComboBox"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the dropdown is currently open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height for the dropdown list.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.SelectionBoxItem">
            <summary>
            Gets or sets the item to display as the control's content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ComboBox.VirtualizationMode">
            <summary>
            Gets or sets the virtualization mode for the items.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ComboBox.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.ComboBoxItem">
            <summary>
            A selectable item in a <see cref="T:Avalonia.Controls.ComboBox"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ContentControl">
            <summary>
            Displays <see cref="P:Avalonia.Controls.ContentControl.Content"/> according to a <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.ContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.Content"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.ContentTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.ContentTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContentControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.Content">
            <summary>
            Gets or sets the content to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.ContentTemplate">
            <summary>
            Gets or sets the data template used to display the content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.Presenter">
            <summary>
            Gets the presenter from the control's template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContentControl.Avalonia#Controls#Presenters#IContentPresenterHost#RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ContentControl.RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter)">
            <summary>
            Called when an <see cref="T:Avalonia.Controls.Presenters.IContentPresenter"/> is registered with the control.
            </summary>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="T:Avalonia.Controls.ContextMenu">
            <summary>
            A control context menu.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ContextMenu"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.#ctor(Avalonia.Controls.Platform.IMenuInteractionHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ContextMenu"/> class.
            </summary>
            <param name="interactionHandler">The menu interaction handler.</param>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContextMenu"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ContextMenu.ContextMenuOpening">
            <summary>
            Occurs when the value of the
            <see cref="P:Avalonia.Controls.ContextMenu.IsOpen" />
            property is changing from false to true.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ContextMenu.ContextMenuClosing">
            <summary>
            Occurs when the value of the
            <see cref="P:Avalonia.Controls.ContextMenu.IsOpen" />
            property is changing from true to false.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.ContextMenuChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Control.ContextMenu"/> property changes on a control.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.Open">
            <summary>
            Opens the menu.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.Open(Avalonia.Controls.Control)">
            <summary>
            Opens a context menu on the specified control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.Close">
            <summary>
            Closes the menu.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Control">
             <summary>
             Base class for Avalonia controls.
             </summary>
             <remarks>
             The control class extends <see cref="T:Avalonia.Input.InputElement"/> and adds the following features:
            
             - A <see cref="P:Avalonia.Controls.Control.Tag"/> property to allow user-defined data to be attached to the control.
             </remarks>
        </member>
        <member name="F:Avalonia.Controls.Control.FocusAdornerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.FocusAdorner"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.TagProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.Tag"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.ContextMenuProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.ContextMenu"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.RequestBringIntoViewEvent">
            <summary>
            Event raised when an element wishes to be scrolled into view.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.FocusAdorner">
            <summary>
            Gets or sets the control's focus adorner.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.DataTemplates">
            <summary>
            Gets or sets the data templates for the control.
            </summary>
            <remarks>
            Each control may define data templates which are applied to the control itself and its
            children.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.ContextMenu">
            <summary>
            Gets or sets a context menu to the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.Tag">
            <summary>
            Gets or sets a user-defined object attached to the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.Avalonia#Controls#Templates#IDataTemplateHost#IsDataTemplatesInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.Avalonia#Rendering#IVisualBrushInitialize#EnsureInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.GetTemplateFocusTarget">
            <summary>
            Gets the element that receives the focus adorner.
            </summary>
            <returns>The control that receives the focus adorner.</returns>
        </member>
        <member name="M:Avalonia.Controls.Control.OnAttachedToVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnDetachedFromVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.ControlExtensions">
            <summary>
            Adds common functionality to <see cref="T:Avalonia.Controls.IControl"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.BringIntoView(Avalonia.Controls.IControl)">
            <summary>
            Tries to bring the control into view.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.BringIntoView(Avalonia.Controls.IControl,Avalonia.Rect)">
            <summary>
            Tries to bring the control into view.
            </summary>
            <param name="control">The control.</param>
            <param name="rect">The area of the control to being into view.</param>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.FindControl``1(Avalonia.Controls.IControl,System.String)">
            <summary>
            Finds the named control in the scope of the specified control.
            </summary>
            <typeparam name="T">The type of the control to find.</typeparam>
            <param name="control">The control to look in.</param>
            <param name="name">The name of the control to find.</param>
            <returns>The control or null if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.Set(Avalonia.Controls.IPseudoClasses,System.String,System.Boolean)">
            <summary>
            Adds or removes a pseudoclass depending on a boolean value.
            </summary>
            <param name="classes">The pseudoclasses collection.</param>
            <param name="name">The name of the pseudoclass to set.</param>
            <param name="value">True to add the pseudoclass or false to remove.</param>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.Set(Avalonia.Controls.IPseudoClasses,System.String,System.IObservable{System.Boolean})">
            <summary>
            Sets a pseudoclass depending on an observable trigger.
            </summary>
            <param name="classes">The pseudoclasses collection.</param>
            <param name="name">The name of the pseudoclass to set.</param>
            <param name="trigger">The trigger: true adds the pseudoclass, false removes.</param>
            <returns>A disposable used to cancel the subscription.</returns>
        </member>
        <member name="T:Avalonia.Controls.Controls">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.Control"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Controls.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Controls"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Controls.#ctor(System.Collections.Generic.IEnumerable{Avalonia.Controls.IControl})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Controls"/> class.
            </summary>
            <param name="items">The initial items in the collection.</param>
        </member>
        <member name="T:Avalonia.Controls.DataValidationErrors">
            <summary>
            A control which displays an error notifier when there is a DataValidationError. 
            Provides attached properties to track errors on a control
            </summary>
            <remarks>
            You will probably only want to create instances inside of control templates.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.DataValidationErrors.ErrorsProperty">
            <summary>
            Defines the DataValidationErrors.Errors attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DataValidationErrors.HasErrorsProperty">
            <summary>
            Defines the DataValidationErrors.HasErrors attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DataValidationErrors.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.DataValidationErrors"/> class.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Decorator">
            <summary>
            Base class for controls which decorate a single child control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Decorator.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Decorator.Child"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Decorator.PaddingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Decorator.Padding"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Decorator.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Decorator"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Decorator.Child">
            <summary>
            Gets or sets the decorated control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Decorator.Padding">
            <summary>
            Gets or sets the padding to place around the <see cref="P:Avalonia.Controls.Decorator.Child"/> control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Decorator.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Decorator.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Decorator.ChildChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Decorator.Child"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.DefinitionBase">
            <summary>
            Base class for <see cref="T:Avalonia.Controls.ColumnDefinition"/> and <see cref="T:Avalonia.Controls.RowDefinition"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DefinitionBase.SharedSizeGroupProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DefinitionBase.SharedSizeGroup"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.SharedSizeGroup">
            <summary>
            Gets or sets the name of the shared size group of the column or row.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Dock">
            <summary>
            Defines the available docking modes for a control in a <see cref="T:Avalonia.Controls.DockPanel"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DockPanel">
            <summary>
            A panel which arranges its children at the top, bottom, left, right or center.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DockPanel.DockProperty">
            <summary>
            Defines the Dock attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DockPanel.LastChildFillProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DockPanel.LastChildFill"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.DockPanel"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.GetDock(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the Dock attached property on the specified control.
            </summary>
            <param name="control">The control.</param>
            <returns>The Dock attached property.</returns>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.SetDock(Avalonia.Controls.Control,Avalonia.Controls.Dock)">
            <summary>
            Sets the value of the Dock attached property on the specified control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The value of the Dock property.</param>
        </member>
        <member name="P:Avalonia.Controls.DockPanel.LastChildFill">
            <summary>
            Gets or sets a value which indicates whether the last child of the 
            <see cref="T:Avalonia.Controls.DockPanel"/> fills the remaining space in the panel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Generators.IItemContainerGenerator">
            <summary>
            Creates containers for items and maintains a list of created containers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.IItemContainerGenerator.Containers">
            <summary>
            Gets the currently realized containers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.IItemContainerGenerator.ItemTemplate">
            <summary>
            Gets or sets the data template used to display the items in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.IItemContainerGenerator.ContainerType">
            <summary>
            Gets the ContainerType, or null if its an untyped ContainerGenerator.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Generators.IItemContainerGenerator.Materialized">
            <summary>
            Signaled whenever new containers are materialized.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Generators.IItemContainerGenerator.Dematerialized">
            <summary>
            Event raised whenever containers are dematerialized.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Generators.IItemContainerGenerator.Recycled">
            <summary>
            Event raised whenever containers are recycled.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.Materialize(System.Int32,System.Object,Avalonia.Controls.Templates.IMemberSelector)">
            <summary>
            Creates a container control for an item.
            </summary>
            <param name="index">
            The index of the item of data in the control's items.
            </param>
            <param name="item">The item.</param>
            <param name="selector">An optional member selector.</param>
            <returns>The created controls.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.Dematerialize(System.Int32,System.Int32)">
            <summary>
            Removes a set of created containers.
            </summary>
            <param name="startingIndex">
            The index of the first item in the control's items.
            </param>
            <param name="count">The the number of items to remove.</param>
            <returns>The removed containers.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.InsertSpace(System.Int32,System.Int32)">
            <summary>
            Inserts space for newly inserted containers in the index.
            </summary>
            <param name="index">The index at which space should be inserted.</param>
            <param name="count">The number of blank spaces to create.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a set of created containers and updates the index of later containers to fill
            the gap.
            </summary>
            <param name="startingIndex">
            The index of the first item in the control's items.
            </param>
            <param name="count">The the number of items to remove.</param>
            <returns>The removed containers.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.Clear">
            <summary>
            Clears all created containers and returns the removed controls.
            </summary>
            <returns>The removed controls.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.ContainerFromIndex(System.Int32)">
            <summary>
            Gets the container control representing the item with the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The container, or null if no container created.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.IndexFromContainer(Avalonia.Controls.IControl)">
            <summary>
            Gets the index of the specified container control.
            </summary>
            <param name="container">The container.</param>
            <returns>The index of the container, or -1 if not found.</returns>
        </member>
        <member name="T:Avalonia.Controls.Generators.ItemContainerEventArgs">
            <summary>
            Provides details for the <see cref="E:Avalonia.Controls.Generators.IItemContainerGenerator.Materialized"/>
            and <see cref="E:Avalonia.Controls.Generators.IItemContainerGenerator.Dematerialized"/> events.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerEventArgs.#ctor(Avalonia.Controls.Generators.ItemContainerInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerEventArgs"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerEventArgs.#ctor(System.Int32,System.Collections.Generic.IList{Avalonia.Controls.Generators.ItemContainerInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerEventArgs"/> class.
            </summary>
            <param name="startingIndex">The index of the first container in the source items.</param>
            <param name="containers">The containers.</param>
            <remarks>
            TODO: Do we really need to pass in StartingIndex here? The ItemContainerInfo objects
            have an index, and what happens if the contains passed in aren't sequential?
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerEventArgs.Containers">
            <summary>
            Gets the containers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerEventArgs.StartingIndex">
            <summary>
            Gets the index of the first container in the source items.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Generators.ItemContainerGenerator">
            <summary>
            Creates containers for items and maintains a list of created containers.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.#ctor(Avalonia.Controls.IControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerGenerator"/> class.
            </summary>
            <param name="owner">The owner control.</param>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator.Containers">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.Generators.ItemContainerGenerator.Materialized">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.Generators.ItemContainerGenerator.Dematerialized">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.Generators.ItemContainerGenerator.Recycled">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator.ItemTemplate">
            <summary>
            Gets or sets the data template used to display the items in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator.Owner">
            <summary>
            Gets the owner control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator.ContainerType">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.Materialize(System.Int32,System.Object,Avalonia.Controls.Templates.IMemberSelector)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.Dematerialize(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.InsertSpace(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.TryRecycle(System.Int32,System.Int32,System.Object,Avalonia.Controls.Templates.IMemberSelector)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.ContainerFromIndex(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.IndexFromContainer(Avalonia.Controls.IControl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.CreateContainer(System.Object)">
            <summary>
            Creates the container for an item.
            </summary>
            <param name="item">The item.</param>
            <returns>The created container control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.MoveContainer(System.Int32,System.Int32,System.Object)">
            <summary>
            Moves a container.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <param name="item">The new item.</param>
            <returns>The container info.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.GetContainerRange(System.Int32,System.Int32)">
            <summary>
            Gets all containers with an index that fall within a range.
            </summary>
            <param name="index">The first index.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>The containers.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.RaiseRecycled(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.Generators.ItemContainerGenerator.Recycled"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Generators.ItemContainerGenerator`1">
            <summary>
            Creates containers for items and maintains a list of created containers.
            </summary>
            <typeparam name="T">The type of the container.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator`1.#ctor(Avalonia.Controls.IControl,Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerGenerator`1"/> class.
            </summary>
            <param name="owner">The owner control.</param>
            <param name="contentProperty">The container's Content property.</param>
            <param name="contentTemplateProperty">The container's ContentTemplate property.</param>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator`1.ContainerType">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator`1.ContentProperty">
            <summary>
            Gets the container's Content property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator`1.ContentTemplateProperty">
            <summary>
            Gets the container's ContentTemplate property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator`1.CreateContainer(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator`1.TryRecycle(System.Int32,System.Int32,System.Object,Avalonia.Controls.Templates.IMemberSelector)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Generators.ItemContainerInfo">
            <summary>
            Holds information about an item container generated by an 
            <see cref="T:Avalonia.Controls.Generators.IItemContainerGenerator"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerInfo.#ctor(Avalonia.Controls.IControl,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerInfo"/> class.
            </summary>
            <param name="container">The container control.</param>
            <param name="item">The item that the container represents.</param>
            <param name="index">
            The index of the item in the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> collection.
            </param>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerInfo.ContainerControl">
            <summary>
            Gets the container control.
            </summary>
            <remarks>
            This will be null if <see cref="P:Avalonia.Controls.Generators.ItemContainerInfo.Item"/> is null.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerInfo.Item">
            <summary>
            Gets the item that the container represents.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerInfo.Index">
            <summary>
            Gets the index of the item in the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> collection.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Generators.ITreeItemContainerGenerator">
            <summary>
            Creates containers for tree items and maintains a list of created containers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ITreeItemContainerGenerator.Index">
            <summary>
            Gets the container index for the tree.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.MenuItemContainerGenerator.#ctor(Avalonia.Controls.IControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerGenerator`1"/> class.
            </summary>
            <param name="owner">The owner control.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.MenuItemContainerGenerator.CreateContainer(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Generators.TreeContainerIndex">
            <summary>
            Maintains an index of all item containers currently materialized by a <see cref="T:Avalonia.Controls.TreeView"/>.
            </summary>
            <remarks>
            Each <see cref="T:Avalonia.Controls.TreeViewItem"/> has its own <see cref="T:Avalonia.Controls.Generators.TreeItemContainerGenerator`1"/> 
            that maintains the list of its direct children, but they also share an instance of this
            class in their <see cref="P:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.Index"/> property which tracks 
            the containers materialized for the entire tree.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.Generators.TreeContainerIndex.Materialized">
            <summary>
            Signaled whenever new containers are materialized.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Generators.TreeContainerIndex.Dematerialized">
            <summary>
            Event raised whenever containers are dematerialized.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.TreeContainerIndex.Containers">
            <summary>
            Gets the currently materialized containers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.TreeContainerIndex.Items">
            <summary>
            Gets the items of currently materialized containers.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeContainerIndex.Add(System.Object,Avalonia.Controls.IControl)">
            <summary>
            Adds an entry to the index.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The item container.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeContainerIndex.Remove(Avalonia.Controls.IControl)">
            <summary>
            Removes a container from the index.
            </summary>
            <param name="container">The item container.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeContainerIndex.Remove(System.Int32,System.Collections.Generic.IEnumerable{Avalonia.Controls.Generators.ItemContainerInfo})">
            <summary>
            Removes a set of containers from the index.
            </summary>
            <param name="startingIndex">The index of the first item.</param>
            <param name="containers">The item containers.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeContainerIndex.ContainerFromItem(System.Object)">
            <summary>
            Gets the container for an item.
            </summary>
            <param name="item">The item.</param>
            <returns>The container, or null of not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeContainerIndex.ItemFromContainer(Avalonia.Controls.IControl)">
            <summary>
            Gets the item for a container.
            </summary>
            <param name="container">The container.</param>
            <returns>The item, or null of not found.</returns>
        </member>
        <member name="T:Avalonia.Controls.Generators.TreeItemContainerGenerator`1">
            <summary>
            Creates containers for tree items and maintains a list of created containers.
            </summary>
            <typeparam name="T">The type of the container.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.#ctor(Avalonia.Controls.IControl,Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty,Avalonia.Controls.Generators.TreeContainerIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.TreeItemContainerGenerator`1"/> class.
            </summary>
            <param name="owner">The owner control.</param>
            <param name="contentProperty">The container's Content property.</param>
            <param name="contentTemplateProperty">The container's ContentTemplate property.</param>
            <param name="itemsProperty">The container's Items property.</param>
            <param name="isExpandedProperty">The container's IsExpanded property.</param>
            <param name="index">The container index for the tree</param>
        </member>
        <member name="P:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.Index">
            <summary>
            Gets the container index for the tree.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.ItemsProperty">
            <summary>
            Gets the item container's Items property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.IsExpandedProperty">
            <summary>
            Gets the item container's IsExpanded property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.CreateContainer(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Grid">
            <summary>
            Lays out child controls according to a grid.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.ColumnProperty">
            <summary>
            Defines the Column attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.ColumnSpanProperty">
            <summary>
            Defines the ColumnSpan attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.RowProperty">
            <summary>
            Defines the Row attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.RowSpanProperty">
            <summary>
            Defines the RowSpan attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.s_sharedSizeScopeHostProperty">
            <summary>
            Defines the SharedSizeScopeHost private property. 
            The ampersands are used to make accessing the property via xaml inconvenient.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.ColumnDefinitions">
            <summary>
            Gets or sets the columns definitions for the grid.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.RowDefinitions">
            <summary>
            Gets or sets the row definitions for the grid.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetColumn(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Column attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's column.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetColumnSpan(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the ColumnSpan attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's column span.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetRow(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Row attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's row.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetRowSpan(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RowSpan attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's row span.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetColumn(Avalonia.AvaloniaObject,System.Int32)">
            <summary>
            Sets the value of the Column attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The column value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetColumnSpan(Avalonia.AvaloniaObject,System.Int32)">
            <summary>
            Sets the value of the ColumnSpan attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The column span value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetRow(Avalonia.AvaloniaObject,System.Int32)">
            <summary>
            Sets the value of the Row attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The row value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetRowSpan(Avalonia.AvaloniaObject,System.Int32)">
            <summary>
            Sets the value of the RowSpan attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The row span value.</param>
        </member>
        <member name="F:Avalonia.Controls.Grid._columnMeasureCache">
            <summary>
            Gets the result of the last column measurement.
            Use this result to reduce the arrange calculation.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid._rowMeasureCache">
            <summary>
            Gets the result of the last row measurement.
            Use this result to reduce the arrange calculation.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid._rowLayoutCache">
            <summary>
            Gets the row layout as of the last measure.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid._columnLayoutCache">
            <summary>
            Gets the column layout as of the last measure.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the grid.
            </summary>
            <param name="constraint">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the grid's children.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.HasSharedSizeScope">
            <summary>
            Tests whether this grid belongs to a shared size scope.
            </summary>
            <returns>True if the grid is registered in a shared size scope.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.SharedScopeChanged">
            <summary>
            Called when the SharedSizeScope for a given grid has changed.
            Unregisters the grid from it's current scope and finds a new one (if any) 
            </summary>
            <remarks>
            This method, while not efficient, correctly handles nested scopes, with any order of scope changes.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Grid.Grid_AttachedToVisualTree(System.Object,Avalonia.VisualTreeAttachmentEventArgs)">
            <summary>
            Callback when a grid is attached to the visual tree. Finds the innermost SharedSizeScope and registers the grid 
            in it.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.Grid_DetachedFromVisualTree(System.Object,Avalonia.VisualTreeAttachmentEventArgs)">
            <summary>
            Callback when a grid is detached from the visual tree. Unregisters the grid from its SharedSizeScope if any.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetSafeColumnRows">
            <summary>
            Get the safe column/columnspan and safe row/rowspan.
            This method ensures that none of the children has a column/row outside the bounds of the definitions.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetSafeSpan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the safe row/column and rowspan/columnspan for a specified range.
            The user may assign row/column properties outside the bounds of the row/column count, this method coerces them inside.
            </summary>
            <param name="length">The row or column count.</param>
            <param name="userIndex">The row or column that the user assigned.</param>
            <param name="userSpan">The rowspan or columnspan that the user assigned.</param>
            <returns>The safe row/column and rowspan/columnspan.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.IsSharedSizeScopeChanged(Avalonia.Controls.Control,Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the value of <see cref="F:Avalonia.Controls.Grid.IsSharedSizeScopeProperty"/> changes for a control.
            </summary>
            <param name="source">The control that triggered the change.</param>
            <param name="arg2">Change arguments.</param>
        </member>
        <member name="T:Avalonia.Controls.GridUnitType">
            <summary>
            Defines the valid units for a <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridUnitType.Auto">
            <summary>
            The row or column is auto-sized to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridUnitType.Pixel">
            <summary>
            The row or column is sized in device independent pixels.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridUnitType.Star">
            <summary>
            The row or column is sized as a weighted proportion of available space.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.GridLength">
            <summary>
            Holds the width or height of a <see cref="T:Avalonia.Controls.Grid"/>'s column and row definitions.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridLength.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.GridLength"/> struct.
            </summary>
            <param name="value">The size of the GridLength in device independent pixels.</param>
        </member>
        <member name="M:Avalonia.Controls.GridLength.#ctor(System.Double,Avalonia.Controls.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.GridLength"/> struct.
            </summary>
            <param name="value">The size of the GridLength.</param>
            <param name="type">The unit of the GridLength.</param>
        </member>
        <member name="P:Avalonia.Controls.GridLength.Auto">
            <summary>
            Gets an instance of <see cref="T:Avalonia.Controls.GridLength"/> that indicates that a row or column should
            auto-size to fit its content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.GridUnitType">
            <summary>
            Gets the unit of the <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.IsAbsolute">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.GridLength"/> has a <see cref="P:Avalonia.Controls.GridLength.GridUnitType"/> of Pixel.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.IsAuto">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.GridLength"/> has a <see cref="P:Avalonia.Controls.GridLength.GridUnitType"/> of Auto.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.IsStar">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.GridLength"/> has a <see cref="P:Avalonia.Controls.GridLength.GridUnitType"/> of Star.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.Value">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridLength.op_Equality(Avalonia.Controls.GridLength,Avalonia.Controls.GridLength)">
            <summary>
            Compares two GridLength structures for equality.
            </summary>
            <param name="a">The first GridLength.</param>
            <param name="b">The second GridLength.</param>
            <returns>True if the structures are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.op_Inequality(Avalonia.Controls.GridLength,Avalonia.Controls.GridLength)">
            <summary>
            Compares two GridLength structures for inequality.
            </summary>
            <param name="gl1">The first GridLength.</param>
            <param name="gl2">The first GridLength.</param>
            <returns>True if the structures are unequal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.Equals(System.Object)">
            <summary>
            Determines whether the <see cref="T:Avalonia.Controls.GridLength"/> is equal to the specified object.
            </summary>
            <param name="o">The object with which to test equality.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.Equals(Avalonia.Controls.GridLength)">
            <summary>
            Compares two GridLength structures for equality.
            </summary>
            <param name="gridLength">The structure with which to test equality.</param>
            <returns>True if the structures are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.GetHashCode">
            <summary>
            Gets a hash code for the GridLength.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.ToString">
            <summary>
            Gets a string representation of the <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.Parse(System.String)">
            <summary>
            Parses a string to return a <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Controls.GridLength"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.ParseLengths(System.String)">
            <summary>
            Parses a string to return a collection of <see cref="T:Avalonia.Controls.GridLength"/>s.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Controls.GridLength"/>.</returns>
        </member>
        <member name="T:Avalonia.Controls.GridSplitter">
            <summary>
                Represents the control that redistributes space between columns or rows of a Grid control.
            </summary>
            <remarks>
                Unlike WPF GridSplitter, Avalonia GridSplitter has only one Behavior, GridResizeBehavior.PreviousAndNext.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.IApplicationLifecycle">
            <summary>
            Sends events about the application lifecycle.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.IApplicationLifecycle.OnExit">
            <summary>
            Sent when the application is exiting.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IApplicationLifecycle.Exit">
            <summary>
            Exits the application.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IContentControl">
            <summary>
            Defines a control that displays <see cref="P:Avalonia.Controls.IContentControl.Content"/> according to a
            <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.Content">
            <summary>
            Gets or sets the content to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.ContentTemplate">
            <summary>
            Gets or sets the data template used to display the content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IControl">
            <summary>
            Interface for Avalonia controls.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IGlobalDataTemplates">
            <summary>
            Defines the application-global data templates.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IHeadered">
            <summary>
            Defines a headered object.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IHeadered.Header">
            <summary>
            Gets or set the header.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Image">
            <summary>
            Displays a <see cref="T:Avalonia.Media.Imaging.Bitmap"/> image.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Image.SourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Image.Source"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Image.StretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Image.Stretch"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Image.Source">
            <summary>
            Gets or sets the bitmap image that will be displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Image.Stretch">
            <summary>
            Gets or sets a value controlling how the image will be stretched.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Image.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the control.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Image.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Image.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.IMenu">
            <summary>
            Represents a <see cref="T:Avalonia.Controls.Menu"/> or <see cref="T:Avalonia.Controls.ContextMenu"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenu.InteractionHandler">
            <summary>
            Gets the menu interaction handler.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenu.IsOpen">
            <summary>
            Gets a value indicating whether the menu is open.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IMenuElement">
            <summary>
            Represents an <see cref="T:Avalonia.Controls.IMenu"/> or <see cref="T:Avalonia.Controls.IMenuItem"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuElement.SelectedItem">
            <summary>
            Gets or sets the currently selected submenu item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuElement.SubItems">
            <summary>
            Gets the submenu items.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IMenuElement.Open">
            <summary>
            Opens the menu or menu item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IMenuElement.Close">
            <summary>
            Closes the menu or menu item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IMenuElement.MoveSelection(Avalonia.Input.NavigationDirection,System.Boolean)">
            <summary>
            Moves the submenu selection in the specified direction.
            </summary>
            <param name="direction">The direction.</param>
            <param name="wrap">Whether to wrap after the first or last item.</param>
            <returns>True if the selection was moved; otherwise false.</returns>
        </member>
        <member name="T:Avalonia.Controls.IMenuItem">
            <summary>
            Represents a <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.HasSubMenu">
            <summary>
            Gets or sets a value that indicates whether the item has a submenu.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.IsPointerOverSubMenu">
            <summary>
            Gets a value indicating whether the mouse is currently over the menu item's submenu.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.IsSubMenuOpen">
            <summary>
            Gets or sets a value that indicates whether the submenu of the <see cref="T:Avalonia.Controls.MenuItem"/> is
            open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.IsTopLevel">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.MenuItem"/> is a top-level main menu item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IMenuItem.Parent">
            <summary>
            Gets the parent <see cref="T:Avalonia.Controls.IMenuElement"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IMenuItem.RaiseClick">
            <summary>
            Raises a click event on the menu item.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IPanel">
            <summary>
            Interface for controls that can contain multiple children.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IPanel.Children">
            <summary>
            Gets the children of the <see cref="T:Avalonia.Controls.Panel"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ISelectable">
            <summary>
            Interface for objects that are selectable.
            </summary>
            <remarks>
            Controls such as <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> use this interface to indicate the
            selected control in a list. If changing the control's <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/> property
            should update the selection in a <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> or equivalent, then
            the control should raise the <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.ISelectable.IsSelected">
            <summary>
            Gets or sets the selected state of the object.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ItemsControl">
            <summary>
            Displays a collection of items.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemsPanelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.ItemTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.MemberSelectorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.MemberSelector"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ItemsControl"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ItemsControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Generators.IItemContainerGenerator"/> for the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.Items">
            <summary>
            Gets or sets the items to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemsPanel">
            <summary>
            Gets or sets the panel used to display the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemTemplate">
            <summary>
            Gets or sets the data template used to display the items in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.MemberSelector">
            <summary>
            Selects a member from <see cref="P:Avalonia.Controls.ItemsControl.Items"/> to use as the list item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.Presenter">
            <summary>
            Gets the items presenter control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.Avalonia#Controls#Presenters#IItemsPresenterHost#RegisterItemsPresenter(Avalonia.Controls.Presenters.IItemsPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ElementAt(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Gets the item at the specified index in a collection.
            </summary>
            <param name="items">The collection.</param>
            <param name="index">The index.</param>
            <returns>The index of the item or -1 if the item was not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.IndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Gets the index of an item in a collection.
            </summary>
            <param name="items">The collection.</param>
            <param name="item">The item.</param>
            <returns>The index of the item or -1 if the item was not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.CreateItemContainerGenerator">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator"/> for the control.
            </summary>
            <returns>
            An <see cref="T:Avalonia.Controls.Generators.IItemContainerGenerator"/> or null.
            </returns>
            <remarks>
            Certain controls such as <see cref="T:Avalonia.Controls.TabControl"/> don't actually create item 
            containers; however they want it to be ItemsControls so that they have an Items 
            property etc. In this case, a derived class can override this method to return null
            in order to disable the creation of item containers.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnContainersMaterialized(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <summary>
            Called when new containers are materialized for the <see cref="T:Avalonia.Controls.ItemsControl"/> by its
            <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator"/>.
            </summary>
            <param name="e">The details of the containers.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnContainersDematerialized(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <summary>
            Called when containers are dematerialized for the <see cref="T:Avalonia.Controls.ItemsControl"/> by its
            <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator"/>.
            </summary>
            <param name="e">The details of the containers.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnContainersRecycled(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <summary>
            Called when containers are recycled for the <see cref="T:Avalonia.Controls.ItemsControl"/> by its
            <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator"/>.
            </summary>
            <param name="e">The details of the containers.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Handles directional navigation within the <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
            <param name="e">The key events.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ItemsChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event is
            raised on <see cref="P:Avalonia.Controls.ItemsControl.Items"/>.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.AddControlItemsToLogicalChildren(System.Collections.IEnumerable)">
            <summary>
            Given a collection of items, adds those that are controls to the logical children.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.RemoveControlItemsFromLogicalChildren(System.Collections.IEnumerable)">
            <summary>
            Given a collection of items, removes those that are controls to from logical children.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.SubscribeToItems(System.Collections.IEnumerable)">
            <summary>
            Subscribes to an <see cref="P:Avalonia.Controls.ItemsControl.Items"/> collection.
            </summary>
            <param name="items">The items collection.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ItemTemplateChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.ItemsControl.ItemTemplate"/> changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.ItemVirtualizationMode">
            <summary>
            Describes the item virtualization method to use for a list.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemVirtualizationMode.None">
            <summary>
            Do not virtualize items.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemVirtualizationMode.Simple">
            <summary>
            Virtualize items without smooth scrolling.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IVirtualizingController">
            <summary>
            Interface implemented by controls that act as controllers for an
            <see cref="T:Avalonia.Controls.IVirtualizingPanel"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IVirtualizingController.UpdateControls">
            <summary>
            Called when the <see cref="T:Avalonia.Controls.IVirtualizingPanel"/>'s controls should be updated.
            </summary>
            <remarks>
            The controller should respond to this method being called by either adding
            children up until <see cref="P:Avalonia.Controls.IVirtualizingPanel.IsFull"/> becomes true or
            removing <see cref="P:Avalonia.Controls.IVirtualizingPanel.OverflowCount"/> controls.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.IVirtualizingPanel">
            <summary>
            A panel that can be used to virtualize items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.Controller">
            <summary>
            Gets or sets the controller for the virtualizing panel.
            </summary>
            <remarks>
            A virtualizing controller is responsible for maintaining the controls in the virtualizing
            panel. This property will be set by the controller when virtualization is initialized.
            Note that this property may remain null if the panel is added to a control that does
            not act as a virtualizing controller.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.IsFull">
            <summary>
            Gets a value indicating whether the panel is full.
            </summary>
            <remarks>
            This property should return false until enough children are added to fill the space
            passed into the last measure or arrange in the direction of scroll. It should be
            updated immediately after a child is added or removed.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.OverflowCount">
            <summary>
            Gets the number of items that can be removed while keeping the panel full.
            </summary>
            <remarks>
            This property should return the number of children that are completely out of the
            panel's current bounds in the direction of scroll. It should be updated after an
            arrange.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.ScrollDirection">
            <summary>
            Gets the direction of scroll.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.AverageItemSize">
            <summary>
            Gets the average size of the materialized items in the direction of scroll.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.PixelOverflow">
            <summary>
            Gets or sets a size in pixels by which the content is overflowing the panel, in the
            direction of scroll.
            </summary>
            <remarks>
            This may be non-zero even when <see cref="P:Avalonia.Controls.IVirtualizingPanel.OverflowCount"/> is zero if the last item
            overflows the panel bounds.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.PixelOffset">
            <summary>
            Gets or sets the current pixel offset of the items in the direction of scroll.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.CrossAxisOffset">
            <summary>
            Gets or sets the current scroll offset in the cross axis.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IVirtualizingPanel.ForceInvalidateMeasure">
            <summary>
            Invalidates the measure of the control and forces a call to 
            <see cref="M:Avalonia.Controls.IVirtualizingController.UpdateControls"/> on the next measure.
            </summary>
            <remarks>
            The implementation for this method should call
            <see cref="M:Avalonia.Layout.ILayoutable.InvalidateMeasure"/> and also ensure that the next call to
            <see cref="M:Avalonia.Layout.ILayoutable.Measure(Avalonia.Size)"/> calls
            <see cref="M:Avalonia.Controls.IVirtualizingController.UpdateControls"/> on the next measure even if
            the available size hasn't changed.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.LayoutTransformControl">
            <summary>
            Control that implements support for transformations as if applied by LayoutTransform.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.LayoutTransformControl.LayoutTransform">
            <summary>
            Gets or sets a graphics transformation that should apply to this element when layout is performed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.ArrangeOverride(Avalonia.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.MeasureOverride(Avalonia.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to TransformRoot.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.IsSizeSmaller(Avalonia.Size,Avalonia.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.RoundMatrix(Avalonia.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformerControl content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform).
            Should be used to notify the LayoutTransformer control that some aspect
            of its Transform property has changed.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.ComputeLargestTransformedSize(Avalonia.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="T:Avalonia.Controls.ListBox">
            <summary>
            An <see cref="T:Avalonia.Controls.ItemsControl"/> in which individual items can be selected.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.ScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.Scroll"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.SelectedItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.SelectedItems"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.SelectionModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.SelectionMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.VirtualizationModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.VirtualizationMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ListBox.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ItemsControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ListBox.Scroll">
            <summary>
            Gets the scroll information for the <see cref="T:Avalonia.Controls.ListBox"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ListBox.SelectedItems">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ListBox.SelectionMode">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ListBox.VirtualizationMode">
            <summary>
            Gets or sets the virtualization mode for the items.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ListBox.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ListBox.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ListBox.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.ListBoxItem">
            <summary>
            A selectable item in a <see cref="T:Avalonia.Controls.ListBox"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBoxItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBoxItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ListBoxItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ListBoxItem"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ListBoxItem.IsSelected">
            <summary>
            Gets or sets the selection state of the item.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Menu">
            <summary>
            A top-level menu control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Menu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Menu"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Menu.#ctor(Avalonia.Controls.Platform.IMenuInteractionHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Menu"/> class.
            </summary>
            <param name="interactionHandler">The menu interaction handler.</param>
        </member>
        <member name="M:Avalonia.Controls.Menu.Close">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Menu.Open">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Menu.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.MenuBase">
            <summary>
            Base class for menu controls.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuBase.IsOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuBase.IsOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuBase.MenuOpenedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuBase.MenuOpened"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuBase.MenuClosedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuBase.MenuClosed"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.MenuBase"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.#ctor(Avalonia.Controls.Platform.IMenuInteractionHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.MenuBase"/> class.
            </summary>
            <param name="interactionHandler">The menu interaction handler.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.MenuBase"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuBase.IsOpen">
            <summary>
            Gets a value indicating whether the menu is open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuBase.Avalonia#Controls#IMenu#InteractionHandler">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuBase.Avalonia#Controls#IMenuElement#SelectedItem">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuBase.Avalonia#Controls#IMenuElement#SubItems">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuBase.InteractionHandler">
            <summary>
            Gets the interaction handler for the menu.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.MenuBase.MenuOpened">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.Menu"/> is opened.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.MenuBase.MenuClosed">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.Menu"/> is closed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.Close">
            <summary>
            Closes the menu.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.Open">
            <summary>
            Opens the menu.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.Avalonia#Controls#IMenuElement#MoveSelection(Avalonia.Input.NavigationDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuBase.OnSubmenuOpened(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a submenu opens somewhere in the menu.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.MenuItem">
            <summary>
            A menu item control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.CommandProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.Command"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.HotKeyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.HotKey"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.CommandParameterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.CommandParameter"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.IconProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.Icon"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.IsSubMenuOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.IsSubMenuOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.ClickEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuItem.Click"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.PointerEnterItemEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuItem.PointerEnterItem"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.PointerLeaveItemEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuItem.PointerLeaveItem"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.SubmenuOpenedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuItem.SubmenuOpened"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem._popup">
            <summary>
            The submenu popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.MenuItem"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.MenuItem.Click">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.MenuItem"/> without a submenu is clicked.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.MenuItem.PointerEnterItem">
            <summary>
            Occurs when the pointer enters a menu item.
            </summary>
            <remarks>
            A bubbling version of the <see cref="E:Avalonia.Input.InputElement.PointerEnter"/> event for menu items.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.MenuItem.PointerLeaveItem">
            <summary>
            Raised when the pointer leaves a menu item.
            </summary>
            <remarks>
            A bubbling version of the <see cref="E:Avalonia.Input.InputElement.PointerLeave"/> event for menu items.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.MenuItem.SubmenuOpened">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.MenuItem"/>'s submenu is opened.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Command">
            <summary>
            Gets or sets the command associated with the menu item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.HotKey">
            <summary>
            Gets or sets an <see cref="T:Avalonia.Input.KeyGesture"/> associated with this control
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="P:Avalonia.Controls.MenuItem.Command"/> property of a
            <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Icon">
            <summary>
            Gets or sets the icon that appears in a <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Avalonia.Controls.MenuItem"/> is currently selected.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.IsSubMenuOpen">
            <summary>
            Gets or sets a value that indicates whether the submenu of the <see cref="T:Avalonia.Controls.MenuItem"/> is
            open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.HasSubMenu">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Avalonia.Controls.MenuItem"/> has a submenu.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.IsTopLevel">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.MenuItem"/> is a top-level main menu item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuItem#IsPointerOverSubMenu">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuItem#Parent">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuElement#MoveSelection(Avalonia.Input.NavigationDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuElement#SelectedItem">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuElement#SubItems">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.Open">
            <summary>
            Opens the submenu.
            </summary>
            <remarks>
            This has the same effect as setting <see cref="P:Avalonia.Controls.MenuItem.IsSubMenuOpen"/> to true.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.Close">
            <summary>
            Closes the submenu.
            </summary>
            <remarks>
            This has the same effect as setting <see cref="P:Avalonia.Controls.MenuItem.IsSubMenuOpen"/> to false.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.Avalonia#Controls#IMenuItem#RaiseClick">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnClick(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when the <see cref="T:Avalonia.Controls.MenuItem"/> is clicked.
            </summary>
            <param name="e">The click event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnPointerEnter(Avalonia.Input.PointerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnPointerLeave(Avalonia.Input.PointerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnSubmenuOpened(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a submenu is opened on this MenuItem or a child MenuItem.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.CloseSubmenus">
            <summary>
            Closes all submenus of the menu item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.CommandChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.Command"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.CanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event fires.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.HeaderChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Header"/> property changes.
            </summary>
            <param name="e">The property change event.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.IconChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.Icon"/> property changes.
            </summary>
            <param name="e">The property change event.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.IsSelectedChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.IsSelected"/> property changes.
            </summary>
            <param name="e">The property change event.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.SubMenuOpenChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.IsSubMenuOpen"/> property changes.
            </summary>
            <param name="e">The property change event.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.PopupOpened(System.Object,System.EventArgs)">
            <summary>
            Called when the submenu's <see cref="T:Avalonia.Controls.Primitives.Popup"/> is opened.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.PopupClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the submenu's <see cref="T:Avalonia.Controls.Primitives.Popup"/> is closed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.MenuItem.DependencyResolver">
            <summary>
            A dependency resolver which returns a <see cref="T:Avalonia.Controls.MenuItemAccessKeyHandler"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.DependencyResolver.Instance">
            <summary>
            Gets the default instance of <see cref="T:Avalonia.Controls.MenuItem.DependencyResolver"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.DependencyResolver.GetService(System.Type)">
            <summary>
            Gets a service of the specified type.
            </summary>
            <param name="serviceType">The service type.</param>
            <returns>A service of the requested type.</returns>
        </member>
        <member name="T:Avalonia.Controls.MenuItemAccessKeyHandler">
            <summary>
            Handles access keys within a <see cref="T:Avalonia.Controls.MenuItem"/>
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItemAccessKeyHandler._registered">
            <summary>
            The registered access keys.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItemAccessKeyHandler._owner">
            <summary>
            The window to which the handler belongs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItemAccessKeyHandler.MainMenu">
            <summary>
            Gets or sets the window's main menu.
            </summary>
            <remarks>
            This property is ignored as a menu item cannot have a main menu.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.SetOwner(Avalonia.Input.IInputRoot)">
            <summary>
            Sets the owner of the access key handler.
            </summary>
            <param name="owner">The owner.</param>
            <remarks>
            This method can only be called once, typically by the owner itself on creation.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.Register(System.Char,Avalonia.Input.IInputElement)">
            <summary>
            Registers an input element to be associated with an access key.
            </summary>
            <param name="accessKey">The access key.</param>
            <param name="element">The input element.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.Unregister(Avalonia.Input.IInputElement)">
            <summary>
            Unregisters the access keys associated with the input element.
            </summary>
            <param name="element">The input element.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.OnTextInput(System.Object,Avalonia.Input.TextInputEventArgs)">
            <summary>
            Handles a key being pressed in the menu.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Mixins.ContentControlMixin">
            <summary>
            Adds content control functionality to control classes.
            </summary>
            <para>
            The <see cref="T:Avalonia.Controls.Mixins.ContentControlMixin"/> adds behavior to a control which acts as a content
            control such as <see cref="T:Avalonia.Controls.ContentControl"/> and <see cref="T:Avalonia.Controls.Primitives.HeaderedItemsControl"/>. It
            keeps the control's logical children in sync with the content being displayed by the
            control.
            </para>
        </member>
        <member name="M:Avalonia.Controls.Mixins.ContentControlMixin.Attach``1(Avalonia.AvaloniaProperty,System.Func{``0,Avalonia.Collections.IAvaloniaList{Avalonia.LogicalTree.ILogical}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Mixins.SelectableMixin"/> class.
            </summary>
            <typeparam name="TControl">The control type.</typeparam>
            <param name="content">The content property.</param>
            <param name="logicalChildrenSelector">
            Given an control of <typeparamref name="TControl"/> should return the control's
            logical children collection.
            </param>
            <param name="presenterName">
            The name of the content presenter in the control's template.
            </param>
        </member>
        <member name="T:Avalonia.Controls.Mixins.SelectableMixin">
            <summary>
            Adds selectable functionality to control classes.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Avalonia.Controls.Mixins.SelectableMixin"/> adds behavior to a control which can be
            selected. It adds the following behavior:
            </para>
            <list type="bullet">
            <item>
            Raises an <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/> when the value if
            the IsSelected property changes.
            </item>
            <item>
            Adds a 'selected' class to selected controls.
            </item>
            <item>
            Requests that the control is scrolled into view when focused.
            </item>
            </list>
            <para>
            Mixins apply themselves to classes and not instances, and as such should be created in
            a static constructor.
            </para>
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Mixins.SelectableMixin.Attach``1(Avalonia.AvaloniaProperty{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Mixins.SelectableMixin"/> class.
            </summary>
            <typeparam name="TControl">The control type.</typeparam>
            <param name="isSelected">The IsSelected property.</param>
        </member>
        <member name="T:Avalonia.Controls.NumericUpDown">
            <summary>
            Control that represents a TextBox with button spinners that allow incrementing and decrementing numeric values.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.AllowSpinProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.AllowSpin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ButtonSpinnerLocationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.ButtonSpinnerLocation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ShowButtonSpinnerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.ShowButtonSpinner"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ClipValueToMinMaxProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.ClipValueToMinMax"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.CultureInfoProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.CultureInfo"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.FormatStringProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.FormatString"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.IncrementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Increment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.IsReadOnlyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.IsReadOnly"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.MaximumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Maximum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.MinimumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Minimum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.ParsingNumberStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.TextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ValueProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.WatermarkProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.NumericUpDown.Watermark"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Spinner">
            <summary>
            Gets the Spinner template part.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.TextBox">
            <summary>
            Gets the TextBox template part.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.AllowSpin">
            <summary>
            Gets or sets the ability to perform increment/decrement operations via the keyboard, button spinners, or mouse wheel.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.ButtonSpinnerLocation">
            <summary>
            Gets or sets current location of the <see cref="T:Avalonia.Controls.ButtonSpinner"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.ShowButtonSpinner">
            <summary>
            Gets or sets a value indicating whether the spin buttons should be shown.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.ClipValueToMinMax">
            <summary>
            Gets or sets if the value should be clipped when minimum/maximum is reached.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.CultureInfo">
            <summary>
            Gets or sets the current CultureInfo.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.FormatString">
            <summary>
            Gets or sets the display format of the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Increment">
            <summary>
            Gets or sets the amount in which to increment the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.IsReadOnly">
            <summary>
            Gets or sets if the control is read only.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Maximum">
            <summary>
            Gets or sets the maximum allowed value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Minimum">
            <summary>
            Gets or sets the minimum allowed value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.ParsingNumberStyle">
            <summary>
            Gets or sets the parsing style (AllowLeadingWhite, Float, AllowHexSpecifier, ...). By default, Any.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Text">
            <summary>
            Gets or sets the formatted string representation of the value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NumericUpDown.Watermark">
            <summary>
            Gets or sets the object to use as a watermark if the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> is null.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Avalonia.Controls.NumericUpDown"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.NumericUpDown"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnCultureInfoChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.CultureInfo"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnFormatStringChanged(System.String,System.String)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.FormatString"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnIncrementChanged(System.Double,System.Double)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Increment"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnIsReadOnlyChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.IsReadOnly"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Maximum"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Minimum"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnTextChanged(System.String,System.String)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnValueChanged(System.Double,System.Double)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnCoerceIncrement(System.Double)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Increment"/> property has to be coerced.
            </summary>
            <param name="baseValue">The value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnCoerceMaximum(System.Double)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Maximum"/> property has to be coerced.
            </summary>
            <param name="baseValue">The value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnCoerceMinimum(System.Double)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Minimum"/> property has to be coerced.
            </summary>
            <param name="baseValue">The value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnCoerceValue(System.Double)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> property has to be coerced.
            </summary>
            <param name="baseValue">The value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnSpin(Avalonia.Controls.SpinEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.RaiseValueChangedEvent(System.Double,System.Double)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.NumericUpDown.ValueChanged"/> event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.ConvertTextToValue(System.String)">
            <summary>
            Converts the formatted text to a value.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.ConvertValueToText">
            <summary>
            Converts the value to formatted text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin directions.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnCultureInfoChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.CultureInfo"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.IncrementChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Increment"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.FormatStringChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.FormatString"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnIsReadOnlyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.IsReadOnly"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnMaximumChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Maximum"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnMinimumChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Minimum"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnTextChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.OnValueChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="F:Avalonia.Controls.NumericUpDown.ValueChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.NumericUpDown.ValueChanged"/> event.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.NumericUpDown.ValueChanged">
            <summary>
            Raised when the <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> changes.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.SyncTextAndValueProperties(System.Boolean,System.String)">
            <summary>
            Synchronize <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> and <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> properties.
            </summary>
            <param name="updateValueFromText">If value should be updated from text.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.SyncTextAndValueProperties(System.Boolean,System.String,System.Boolean)">
            <summary>
            Synchronize <see cref="P:Avalonia.Controls.NumericUpDown.Text"/> and <see cref="P:Avalonia.Controls.NumericUpDown.Value"/> properties.
            </summary>
            <param name="updateValueFromText">If value should be updated from text.</param>
            <param name="text">The text.</param>
            <param name="forceTextUpdate">Force text update.</param>
        </member>
        <member name="M:Avalonia.Controls.NumericUpDown.ParsePercent(System.String,System.IFormatProvider)">
            <summary>
            Parse percent format text
            </summary>
            <param name="text">Text to parse.</param>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="T:Avalonia.Controls.Orientation">
            <summary>
            Defines vertical or horizontal orientation.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Orientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Orientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Panel">
            <summary>
            Base class for controls that can contain multiple children.
            </summary>
            <remarks>
            Controls can be added to a <see cref="T:Avalonia.Controls.Panel"/> by adding them to its <see cref="P:Avalonia.Controls.Panel.Children"/>
            collection. All children are layed out to fill the panel.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Panel.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Panel.Background"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Panel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Panel"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Panel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Panel.Children">
            <summary>
            Gets the children of the <see cref="T:Avalonia.Controls.Panel"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Panel.Background">
            <summary>
            Gets or Sets Panel background brush.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Panel.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the visual to a <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Panel.AffectsParentArrange``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property on a child as affecting the parent panel's arrangement.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Avalonia.Controls.Panel.AffectsParentMeasure``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property on a child as affecting the parent panel's measurement.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Avalonia.Controls.Panel.ChildrenChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Panel.Children"/> collection changes.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.PixelPointEventArgs">
            <summary>
            Provides <see cref="T:Avalonia.PixelPoint"/> data for events.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.PixelPointEventArgs.#ctor(Avalonia.PixelPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.PixelPointEventArgs"/> class.
            </summary>
            <param name="point">The <see cref="T:Avalonia.PixelPoint"/> data.</param>
        </member>
        <member name="P:Avalonia.Controls.PixelPointEventArgs.Point">
            <summary>
            Gets the <see cref="T:Avalonia.PixelPoint"/> data.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.PlacementMode">
            <summary>
            Defines the placement for a <see cref="T:Avalonia.Controls.Primitives.Popup"/> control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Pointer">
            <summary>
            The popup is placed at the pointer position.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Bottom">
            <summary>
            The popup is placed at the bottom left of its target.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Right">
            <summary>
            The popup is placed at the top right of its target.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Platform.DefaultMenuInteractionHandler">
            <summary>
            Provides the default keyboard and pointer interaction for menus.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Platform.IMenuInteractionHandler">
            <summary>
            Handles user interaction for menus.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Platform.IMenuInteractionHandler.Attach(Avalonia.Controls.IMenu)">
            <summary>
            Attaches the interaction handler to a menu.
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="M:Avalonia.Controls.Platform.IMenuInteractionHandler.Detach(Avalonia.Controls.IMenu)">
            <summary>
            Detaches the interaction handler from the attached menu.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Platform.ISystemDialogImpl">
            <summary>
            Defines a platform-specific system dialog implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Platform.ISystemDialogImpl.ShowFileDialogAsync(Avalonia.Controls.FileDialog,Avalonia.Platform.IWindowImpl)">
            <summary>
            Shows a file dialog.
            </summary>
            <param name="dialog">The details of the file dialog to show.</param>
            <param name="parent">The parent window.</param>
            <returns>A task returning the selected filenames.</returns>
        </member>
        <member name="M:Avalonia.Controls.Platform.Surfaces.IFramebufferPlatformSurface.Lock">
            <summary>
            Provides a framebuffer descriptor for drawing.
            </summary>
            <remarks>
            Contents should be drawn on actual window after disposing
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Presenters.CarouselPresenter">
            <summary>
            Displays pages inside an <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.CarouselPresenter.IsVirtualizedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.CarouselPresenter.IsVirtualized"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.CarouselPresenter.SelectedIndexProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.CarouselPresenter.SelectedIndex"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.CarouselPresenter.PageTransitionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.CarouselPresenter.PageTransition"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.CarouselPresenter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.CarouselPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.CarouselPresenter.IsVirtualized">
            <summary>
            Gets or sets a value indicating whether the items in the carousel are virtualized.
            </summary>
            <remarks>
            When the carousel is virtualized, only the active page is held in memory.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Presenters.CarouselPresenter.SelectedIndex">
            <summary>
            Gets or sets the index of the selected page.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.CarouselPresenter.PageTransition">
            <summary>
            Gets or sets a transition to use when switching pages.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.CarouselPresenter.PanelCreated(Avalonia.Controls.IPanel)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.CarouselPresenter.ItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.CarouselPresenter.MoveToPage(System.Int32,System.Int32)">
            <summary>
            Moves to the selected page, animating if a <see cref="P:Avalonia.Controls.Presenters.CarouselPresenter.PageTransition"/> is set.
            </summary>
            <param name="fromIndex">The index of the old page.</param>
            <param name="toIndex">The index of the new page.</param>
            <returns>A task tracking the animation.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.CarouselPresenter.SelectedIndexChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Presenters.CarouselPresenter.SelectedIndex"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ContentPresenter">
            <summary>
            Presents a single item of data inside a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/> template.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.BorderBrush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.BorderThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.CornerRadius"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.ContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Content"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.ContentTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Padding"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Background">
            <summary>
            Gets or sets a brush with which to paint the background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.BorderBrush">
            <summary>
            Gets or sets a brush with which to paint the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.BorderThickness">
            <summary>
            Gets or sets the thickness of the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.CornerRadius">
            <summary>
            Gets or sets the radius of the border rounded corners.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Child">
            <summary>
            Gets the control displayed by the presenter.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Content">
            <summary>
            Gets or sets the content to be displayed by the presenter.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.ContentTemplate">
            <summary>
            Gets or sets the data template used to display the content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the border the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the border of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Padding">
            <summary>
            Gets or sets the space between the border and the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Presenters.ContentPresenter.Avalonia#Controls#Presenters#IContentPresenter#ChildChanging">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.ApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.UpdateChild">
            <summary>
            Updates the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control based on the control's <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Content"/>.
            </summary>
            <remarks>
            Usually the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control is created automatically when 
            <see cref="M:Avalonia.Controls.Presenters.ContentPresenter.ApplyTemplate"/> is called; however for this to happen, the control needs to
            be attached to a logical tree (if the control is not attached to the logical tree, it
            is reasonable to expect that the DataTemplates needed for the child are not yet 
            available). This method forces the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control's creation at any point, 
            and is particularly useful in unit tests.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.Render(Avalonia.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.CreateChild">
            <summary>
            Creates the child control.
            </summary>
            <returns>The child control or null.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.ContentChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Content"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.IContentPresenter">
            <summary>
            Interface for controls that present a single item of data inside a
            <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/> template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.IContentPresenter.Child">
            <summary>
            Gets the control displayed by the presenter.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.IContentPresenter.Content">
            <summary>
            Gets or sets the content to be displayed by the presenter.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Presenters.IContentPresenter.ChildChanging">
            <summary>
            Raised when <see cref="P:Avalonia.Controls.Presenters.IContentPresenter.Child"/> property is about to change.
            </summary>
            <remarks>
            This event should be raised after the child has been removed from the visual tree,
            but before the <see cref="P:Avalonia.Controls.Presenters.IContentPresenter.Child"/> property has changed. It is intended for consumption
            by <see cref="T:Avalonia.Controls.Mixins.ContentControlMixin"/> in order to update the host control's logical
            children.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Presenters.IContentPresenterHost">
            <summary>
            Represents a control which hosts a content presenter.
            </summary>
            <remarks>
            This interface is implemented by <see cref="T:Avalonia.Controls.ContentControl"/> which usually contains a
            <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> and exposes it through its 
            <see cref="P:Avalonia.Controls.ContentControl.Presenter"/> property. ContentPresenters can be within
            nested templates or in popups and so are not necessarily created immediately when the
            parent control's template is instantiated so they register themselves using this 
            interface.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter)">
            <summary>
            Registers an <see cref="T:Avalonia.Controls.Presenters.IContentPresenter"/> with a host control.
            </summary>
            <param name="presenter">The content presenter.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.IItemsPresenterHost">
            <summary>
            Represents a control which hosts an items presenter.
            </summary>
            <remarks>
            This interface is implemented by <see cref="T:Avalonia.Controls.ItemsControl"/> which usually contains an
            <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> and exposes it through its 
            <see cref="P:Avalonia.Controls.ItemsControl.Presenter"/> property. ItemsPresenters can be within
            nested templates or in popups and so are not necessarily created immediately when the
            parent control's template is instantiated so they register themselves using this 
            interface.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.IItemsPresenterHost.RegisterItemsPresenter(Avalonia.Controls.Presenters.IItemsPresenter)">
            <summary>
            Registers an <see cref="T:Avalonia.Controls.Presenters.IItemsPresenter"/> with a host control.
            </summary>
            <param name="presenter">The items presenter.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.IPresenter">
            <summary>
            Interface for presenters such as <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> and
            <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/>.
            </summary>
            <remarks>
            A presenter is the gateway between a templated control and its content. When
            a control which implements <see cref="T:Avalonia.Controls.Presenters.IPresenter"/> is found in the template
            of a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/> then that signals that the visual child
            of the presenter is not a part of the template.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemsPresenter">
            <summary>
            Displays items inside an <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenter.VirtualizationModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenter.VirtualizationMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.VirtualizationMode">
            <summary>
            Gets or sets the virtualization mode for the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#CanHorizontallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#CanVerticallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#IsLogicalScrollEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#IScrollable#Extent">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#IScrollable#Offset">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#IScrollable#Viewport">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#InvalidateScroll">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#ScrollSize">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#PageScrollSize">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#BringIntoView(Avalonia.Controls.IControl,Avalonia.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#GetControlInDirection(Avalonia.Input.NavigationDirection,Avalonia.Controls.IControl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenter.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenter.PanelCreated(Avalonia.Controls.IPanel)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemsPresenterBase">
            <summary>
            Base class for controls that present items inside an <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsPanelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenterBase.MemberSelectorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.MemberSelector"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items">
            <summary>
            Gets or sets the items to be displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemContainerGenerator">
            <summary>
            Gets the item container generator.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsPanel">
            <summary>
            Gets or sets a template which creates the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Panel"/> used to display the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemTemplate">
            <summary>
            Gets or sets the data template used to display the items in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.MemberSelector">
            <summary>
            Selects a member from <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items"/> to use as the list item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Panel">
            <summary>
            Gets the panel used to display the items.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ScrollIntoView(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.CreateItemContainerGenerator">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemContainerGenerator"/> for the control.
            </summary>
            <returns>
            An <see cref="T:Avalonia.Controls.Generators.IItemContainerGenerator"/> or null.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.PanelCreated(Avalonia.Controls.IPanel)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Panel"/> is created.
            </summary>
            <param name="panel">The panel.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the items for the presenter change, either because <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items"/>
            has been set, the items collection has been modified, or the panel has been created.
            </summary>
            <param name="e">A description of the change.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.CreatePanel">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Panel"/> when <see cref="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ApplyTemplate"/> is called for the first
            time.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items"/> collection changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemVirtualizer">
            <summary>
            Base class for classes which handle virtualization for an <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.#ctor(Avalonia.Controls.Presenters.ItemsPresenter)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Presenters.ItemVirtualizer"/> class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Owner">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> which owns the virtualizer.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.VirtualizingPanel">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.IVirtualizingPanel"/> which will host the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Items">
            <summary>
            Gets the items to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.ItemCount">
            <summary>
            Gets the number of items in <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.Items"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.FirstIndex">
            <summary>
            Gets or sets the index of the first item displayed in the panel.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.NextIndex">
            <summary>
            Gets or sets the index of the first item beyond those displayed in the panel.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Vertical">
            <summary>
            Gets a value indicating whether the items should be scroll horizontally or vertically.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.IsLogicalScrollEnabled">
            <summary>
            Gets a value indicating whether logical scrolling is enabled.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.ExtentValue">
            <summary>
            Gets the value of the scroll extent.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.OffsetValue">
            <summary>
            Gets or sets the value of the current scroll offset.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.ViewportValue">
            <summary>
            Gets the value of the scrollable viewport.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Extent">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.ExtentValue"/> as a <see cref="T:Avalonia.Size"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Viewport">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.ViewportValue"/> as a <see cref="T:Avalonia.Size"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Offset">
            <summary>
            Gets or sets the <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.OffsetValue"/> as a <see cref="T:Avalonia.Vector"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.Create(Avalonia.Controls.Presenters.ItemsPresenter)">
            <summary>
            Creates an <see cref="T:Avalonia.Controls.Presenters.ItemVirtualizer"/> based on an item presenter's 
            <see cref="T:Avalonia.Controls.ItemVirtualizationMode"/>.
            </summary>
            <param name="owner">The items presenter.</param>
            <returns>An <see cref="T:Avalonia.Controls.Presenters.ItemVirtualizer"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.MeasureOverride(Avalonia.Size)">
            <summary>
            Carries out a measure for the related <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/>.
            </summary>
            <param name="availableSize">The size available to the control.</param>
            <returns>The desired size for the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.ArrangeOverride(Avalonia.Size)">
            <summary>
            Carries out an arrange for the related <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/>.
            </summary>
            <param name="finalSize">The size available to the control.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.UpdateControls">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.GetControlInDirection(Avalonia.Input.NavigationDirection,Avalonia.Controls.IControl)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.ItemsChanged(System.Collections.IEnumerable,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the items for the presenter change, either because 
            <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items"/> has been set, the items collection has been
            modified, or the panel has been created.
            </summary>
            <param name="items">The items.</param>
            <param name="e">A description of the change.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.InvalidateScroll">
            <summary>
            Invalidates the current scroll.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemVirtualizerNone">
            <summary>
            Represents an item virtualizer for an <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> that doesn't actually
            virtualize items - it just creates a container for every item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.IsLogicalScrollEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.ExtentValue">
            <summary>
            This property should never be accessed because <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.IsLogicalScrollEnabled"/> is
            false.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.OffsetValue">
            <summary>
            This property should never be accessed because <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.IsLogicalScrollEnabled"/> is
            false.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.ViewportValue">
            <summary>
            This property should never be accessed because <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.IsLogicalScrollEnabled"/> is
            false.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerNone.ItemsChanged(System.Collections.IEnumerable,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerNone.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemVirtualizerSimple">
            <summary>
            Handles virtualization in an <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> for
            <see cref="F:Avalonia.Controls.ItemVirtualizationMode.Simple"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.#ctor(Avalonia.Controls.Presenters.ItemsPresenter)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Presenters.ItemVirtualizerSimple"/> class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerSimple.IsLogicalScrollEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerSimple.ExtentValue">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerSimple.OffsetValue">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerSimple.ViewportValue">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.UpdateControls">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.ItemsChanged(System.Collections.IEnumerable,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.ScrollIntoView(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.CreateAndRemoveContainers">
            <summary>
            Creates and removes containers such that we have at most enough containers to fill
            the panel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.RecycleContainers">
            <summary>
            Updates the containers in the panel to make sure they are displaying the correct item
            based on <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.FirstIndex"/>.
            </summary>
            <remarks>
            This method requires that <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.FirstIndex"/> + the number of
            materialized containers is not more than <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.ItemCount"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.RecycleContainersForMove(System.Int32)">
            <summary>
            Recycles containers when a move occurs.
            </summary>
            <param name="delta">The delta of the move.</param>
            <remarks>
            If the move is less than a page, then this method moves the containers for the items
            that are still visible to the correct place, and recycles and moves the others. For
            example: if there are 20 items and 10 containers visible and the user scrolls 5
            items down, then the bottom 5 containers will be moved to the top and the top 5 will
            be moved to the bottom and recycled to display the newly visible item. Updates 
            <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.FirstIndex"/> and <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.NextIndex"/>
            with their new values.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.RecycleContainersOnRemove">
            <summary>
            Recycles containers due to items being removed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.RemoveContainers(System.Int32)">
            <summary>
            Removes the specified number of containers from the end of the panel and updates
            <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.NextIndex"/>.
            </summary>
            <param name="count">The number of containers to remove.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.ScrollIntoView(System.Int32)">
            <summary>
            Scrolls the item with the specified index into view.
            </summary>
            <param name="index">The item index.</param>
            <returns>The container that was brought into view.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.CoerceOffset(System.Double)">
            <summary>
            Ensures an offset value is within the value range.
            </summary>
            <param name="value">The value.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ScrollContentPresenter">
            <summary>
            Presents a scrolling view of content inside a <see cref="T:Avalonia.Controls.ScrollViewer"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScroll"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScroll"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Extent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Offset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Viewport"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.CanHorizontallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.CanVerticallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Extent">
            <summary>
            Gets the extent of the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Offset">
            <summary>
            Gets or sets the current scroll offset.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Viewport">
            <summary>
            Gets the size of the viewport on the scrollable content.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.BringDescendantIntoView(Avalonia.VisualTree.IVisual,Avalonia.Rect)">
            <summary>
            Attempts to bring a portion of the target visual into view by scrolling the content.
            </summary>
            <param name="target">The target visual.</param>
            <param name="targetRect">The portion of the target visual to bring into view.</param>
            <returns>True if the scroll offset was changed; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.TextPresenter.CreateFormattedText(Avalonia.Size,System.String)">
            <summary>
            Creates the <see cref="T:Avalonia.Media.FormattedText"/> used to render the text.
            </summary>
            <param name="constraint">The constraint of the text.</param>
            <param name="text">The text to generated the <see cref="T:Avalonia.Media.FormattedText"/> for.</param>
            <returns>A <see cref="T:Avalonia.Media.FormattedText"/> object.</returns>
        </member>
        <member name="T:Avalonia.Controls.ProgressBar">
            <summary>
            A control used to indicate the progress of an operation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ProgressBar.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ProgressBar.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:Avalonia.Controls.RepeatButton.IntervalProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RepeatButton.Interval"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RepeatButton.DelayProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RepeatButton.Delay"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RepeatButton.Interval">
            <summary>
            Gets or sets the amount of time, in milliseconds, of repeating clicks.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RepeatButton.Delay">
            <summary>
            Gets or sets the amount of time, in milliseconds, to wait before repeating begins.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RowDefinition">
            <summary>
            Holds a row definitions for a <see cref="T:Avalonia.Controls.Grid"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RowDefinition.MaxHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RowDefinition.MaxHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RowDefinition.MinHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RowDefinition.MinHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RowDefinition.HeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RowDefinition.Height"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinition"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinition.#ctor(System.Double,Avalonia.Controls.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinition"/> class.
            </summary>
            <param name="value">The height of the row.</param>
            <param name="type">The height unit of the column.</param>
        </member>
        <member name="M:Avalonia.Controls.RowDefinition.#ctor(Avalonia.Controls.GridLength)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinition"/> class.
            </summary>
            <param name="height">The height of the column.</param>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.ActualHeight">
            <summary>
            Gets the actual calculated height of the row.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.MaxHeight">
            <summary>
            Gets or sets the maximum height of the row in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.MinHeight">
            <summary>
            Gets or sets the minimum height of the row in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.Height">
            <summary>
            Gets or sets the height of the row.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RowDefinitions">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.RowDefinition"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinitions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinitions"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinitions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinitions"/> class.
            </summary>
            <param name="s">A string representation of the row definitions.</param>
        </member>
        <member name="M:Avalonia.Controls.RowDefinitions.Parse(System.String)">
            <summary>
            Parses a string representation of row definitions collection.
            </summary>
            <param name="s">The row definitions string.</param>
            <returns>The <see cref="T:Avalonia.Controls.RowDefinitions"/>.</returns>
        </member>
        <member name="T:Avalonia.Controls.ScrollViewer">
            <summary>
            A control scrolls its content if the content is bigger than the space available.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.CanHorizontallyScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.CanHorizontallyScroll"/> property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.CanVerticallyScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.CanVerticallyScroll"/> property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.ExtentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.Extent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.OffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.Offset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.ViewportProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.Viewport"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty">
            <summary>
            Defines the HorizontalScrollBarMaximum property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty">
            <summary>
            Defines the HorizontalScrollBarValue property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty">
            <summary>
            Defines the HorizontalScrollBarViewportSize property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibility"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty">
            <summary>
            Defines the VerticalScrollBarMaximum property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty">
            <summary>
            Defines the VerticalScrollBarValue property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty">
            <summary>
            Defines the VerticalScrollBarViewportSize property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibility"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ScrollViewer"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ScrollViewer"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.Extent">
            <summary>
            Gets the extent of the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.Offset">
            <summary>
            Gets or sets the current scroll offset.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.Viewport">
            <summary>
            Gets the size of the viewport on the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets the horizontal scrollbar visibility.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibility">
            <summary>
            Gets or sets the vertical scrollbar visibility.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.CanHorizontallyScroll">
            <summary>
            Gets a value indicating whether the viewer can scroll horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.CanVerticallyScroll">
            <summary>
            Gets a value indicating whether the viewer can scroll vertically.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximum">
            <summary>
            Gets the maximum horizontal scrollbar value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarValue">
            <summary>
            Gets or sets the horizontal scrollbar value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSize">
            <summary>
            Gets the size of the horizontal scrollbar viewport.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximum">
            <summary>
            Gets the maximum vertical scrollbar value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarValue">
            <summary>
            Gets or sets the vertical scrollbar value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSize">
            <summary>
            Gets the size of the vertical scrollbar viewport.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the HorizontalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(Avalonia.Controls.Control,Avalonia.Controls.Primitives.ScrollBarVisibility)">
            <summary>
            Gets the value of the HorizontalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetVerticalScrollBarVisibility(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the VerticalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetVerticalScrollBarVisibility(Avalonia.Controls.Control,Avalonia.Controls.Primitives.ScrollBarVisibility)">
            <summary>
            Gets the value of the VerticalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="T:Avalonia.Controls.SelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SelectionChangedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.SelectionChangedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The event being raised.</param>
            <param name="addedItems">The items added to the selection.</param>
            <param name="removedItems">The items removed from the selection.</param>
        </member>
        <member name="P:Avalonia.Controls.SelectionChangedEventArgs.AddedItems">
            <summary>
            Gets the items that were added to the selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SelectionChangedEventArgs.RemovedItems">
            <summary>
            Gets the items that were removed from the selection.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SelectionMode">
            <summary>
            Defines the selection mode for a control which can select multiple items.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.Single">
            <summary>
            One item can be selected.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.Multiple">
            <summary>
            Multiple items can be selected.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.Toggle">
            <summary>
            Item selection can be toggled by tapping/spacebar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.AlwaysSelected">
            <summary>
            An item will always be selected as long as there are items to select.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Separator">
            <summary>
            A separator control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Shapes.Shape.AffectsGeometry``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the shape's geometry.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a control's static constructor, any change to the
            property will cause <see cref="M:Avalonia.Controls.Shapes.Shape.InvalidateGeometry"/> to be called on the element.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Slider">
            <summary>
            A control that lets the user select from a range of values by moving a Thumb control along a Track.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.IsSnapToTickEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.IsSnapToTickEnabled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.TickFrequencyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.TickFrequency"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Slider.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Slider"/> class. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Slider.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Avalonia.Controls.Slider"/> class. 
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.Orientation">
            <summary>
            Gets or sets the orientation of a <see cref="T:Avalonia.Controls.Slider"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.IsSnapToTickEnabled">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Avalonia.Controls.Slider"/> automatically moves the <see cref="T:Avalonia.Controls.Primitives.Thumb"/> to the closest tick mark.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.TickFrequency">
            <summary>
            Gets or sets the interval between tick marks.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnThumbDragStarted(Avalonia.Input.VectorEventArgs)">
            <summary>
            Called when user start dragging the <see cref="T:Avalonia.Controls.Primitives.Thumb"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnThumbDragDelta(Avalonia.Input.VectorEventArgs)">
            <summary>
            Called when user dragging the <see cref="T:Avalonia.Controls.Primitives.Thumb"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnThumbDragCompleted(Avalonia.Input.VectorEventArgs)">
            <summary>
            Called when user stop dragging the <see cref="T:Avalonia.Controls.Primitives.Thumb"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Avalonia.Controls.Slider.MoveToNextTick(System.Double)">
            <summary>
            Searches for the closest tick and sets Value to that tick.
            </summary>
            <param name="value">Value that want to snap to closest Tick.</param>
        </member>
        <member name="M:Avalonia.Controls.Slider.SnapToTick(System.Double)">
            <summary>
            Snap the input 'value' to the closest tick.
            </summary>
            <param name="value">Value that want to snap to closest Tick.</param>
        </member>
        <member name="T:Avalonia.Controls.ValidSpinDirections">
            <summary>
            Represents spin directions that are valid.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ValidSpinDirections.None">
            <summary>
            Can not increase nor decrease.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ValidSpinDirections.Increase">
            <summary>
            Can increase.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ValidSpinDirections.Decrease">
            <summary>
            Can decrease.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SpinDirection">
            <summary>
            Represents spin directions that could be initiated by the end-user.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SpinDirection.Increase">
            <summary>
            Represents a spin initiated by the end-user in order to Increase a value.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SpinDirection.Decrease">
            <summary>
            Represents a spin initiated by the end-user in order to Decrease a value.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SpinEventArgs">
            <summary>
            Provides data for the Spinner.Spin event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SpinEventArgs.Direction">
            <summary>
            Gets the SpinDirection for the spin that has been initiated by the end-user.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SpinEventArgs.UsingMouseWheel">
            <summary>
            Get or set whether the spin event originated from a mouse wheel event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SpinEventArgs.#ctor(Avalonia.Controls.SpinDirection)">
            <summary>
            Initializes a new instance of the SpinEventArgs class.
            </summary>
            <param name="direction">Spin direction.</param>
        </member>
        <member name="T:Avalonia.Controls.Spinner">
            <summary>
            Base class for controls that represents controls that can spin.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Spinner.ValidSpinDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Spinner.ValidSpinDirection"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Spinner.SpinEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Spinner.Spin"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Spinner.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Spinner"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Spinner.Spin">
            <summary>
            Occurs when spinning is initiated by the end-user.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Spinner.ValidSpinDirection">
            <summary>
            Gets or sets <see cref="T:Avalonia.Controls.ValidSpinDirections"/> allowed for this control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Spinner.OnValidSpinDirectionChanged(Avalonia.Controls.ValidSpinDirections,Avalonia.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.Controls.Spinner.OnSpin(Avalonia.Controls.SpinEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="e">Spin event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Spinner.OnValidSpinDirectionPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Spinner.ValidSpinDirection"/> property value changed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.StackPanel">
            <summary>
            A panel which lays out its children horizontally or vertically.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.StackPanel.SpacingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.StackPanel.Spacing"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.StackPanel.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.StackPanel.Orientation"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.StackPanel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.StackPanel.Spacing">
            <summary>
            Gets or sets the size of the spacing to place between child controls.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.StackPanel.Orientation">
            <summary>
            Gets or sets the orientation in which child controls will be layed out.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.Avalonia#Input#INavigableContainer#GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement,System.Boolean)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <param name="wrap">Whether to wrap around when the first or last item is reached.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.GetControlInDirection(Avalonia.Input.NavigationDirection,Avalonia.Controls.IControl)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the control's children.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="T:Avalonia.Controls.TabControl">
            <summary>
            A tab control that displays a tab strip along with the content of the selected tab.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.TabStripPlacementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabControl.TabStripPlacement"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabControl.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabControl.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.ContentTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabControl.ContentTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.SelectedContentProperty">
            <summary>
            The selected content property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.SelectedContentTemplateProperty">
            <summary>
            The selected content template property
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TabControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TabControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.TabStripPlacement">
            <summary>
            Gets or sets the tabstrip placement of the TabControl.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.ContentTemplate">
            <summary>
            Gets or sets the default data template used to display the content of the selected tab.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.SelectedContent">
            <summary>
            Gets or sets the content of the selected tab.
            </summary>
            <value>
            The content of the selected tab.
            </value>
        </member>
        <member name="P:Avalonia.Controls.TabControl.SelectedContentTemplate">
            <summary>
            Gets or sets the content template for the selected tab.
            </summary>
            <value>
            The content template of the selected tab.
            </value>
        </member>
        <member name="M:Avalonia.Controls.TabControl.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TabControl.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.TabItem">
            <summary>
            An item in  a <see cref="T:Avalonia.Controls.Primitives.TabStrip"/> or <see cref="T:Avalonia.Controls.TabControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabItem.TabStripPlacementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabItem.TabStripPlacement"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TabItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TabItem"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabItem.TabStripPlacement">
            <summary>
            Gets the tab strip placement.
            </summary>
            <value>
            The tab strip placement.
            </value>
        </member>
        <member name="P:Avalonia.Controls.TabItem.IsSelected">
            <summary>
            Gets or sets the selection state of the item.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Templates.DataTemplateExtensions">
            <summary>
            Defines extension methods for working with <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.DataTemplateExtensions.FindDataTemplate(Avalonia.Controls.IControl,System.Object,Avalonia.Controls.Templates.IDataTemplate)">
            <summary>
            Find a data template that matches a piece of data.
            </summary>
            <param name="control">The control searching for the data template.</param>
            <param name="data">The data.</param>
            <param name="primary">
            An optional primary template that can will be tried before the DataTemplates in the
            tree are searched.
            </param>
            <returns>The data template or null if no matching data template was found.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.DataTemplates">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.DataTemplates.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.DataTemplates"/> class.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncControlTemplate">
            <summary>
            A template for a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncControlTemplate.#ctor(System.Func{Avalonia.Styling.ITemplatedControl,Avalonia.Controls.IControl})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncControlTemplate"/> class.
            </summary>
            <param name="build">The build function.</param>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncControlTemplate`1">
            <summary>
            A template for a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/>.
            </summary>
            <typeparam name="T">The type of the lookless control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncControlTemplate`1.#ctor(System.Func{`0,Avalonia.Controls.IControl})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncControlTemplate`1"/> class.
            </summary>
            <param name="build">The build function.</param>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncDataTemplate">
            <summary>
            Builds a control for a piece of data.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Templates.FuncDataTemplate.Default">
            <summary>
            The default data template used in the case where no matching data template is found.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Templates.FuncDataTemplate._match">
            <summary>
            The implementation of the <see cref="M:Avalonia.Controls.Templates.FuncDataTemplate.Match(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.#ctor(System.Type,System.Func{System.Object,Avalonia.Controls.IControl},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/> class.
            </summary>
            <param name="type">The type of data which the data template matches.</param>
            <param name="build">
            A function which when passed an object of <paramref name="type"/> returns a control.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.#ctor(System.Func{System.Object,System.Boolean},System.Func{System.Object,Avalonia.Controls.IControl},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which returns a control for matching data.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="P:Avalonia.Controls.Templates.FuncDataTemplate.SupportsRecycling">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.Match(System.Object)">
            <summary>
            Checks to see if this data template matches the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            True if the data template can build a control for the data, otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.IsInstance(System.Object,System.Type)">
            <summary>
            Determines of an object is of the specified type.
            </summary>
            <param name="o">The object.</param>
            <param name="t">The type.</param>
            <returns>
            True if <paramref name="o"/> is of type <paramref name="t"/>, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncDataTemplate`1">
            <summary>
            Builds a control for a piece of data of specified type.
            </summary>
            <typeparam name="T">The type of the template's data.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.#ctor(System.Func{`0,Avalonia.Controls.IControl},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate`1"/> class.
            </summary>
            <param name="build">
            A function which when passed an object of <typeparamref name="T"/> returns a control.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.#ctor(System.Func{`0,System.Boolean},System.Func{`0,Avalonia.Controls.IControl},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate`1"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which when passed an object of <typeparamref name="T"/> returns a control.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.CastMatch(System.Func{`0,System.Boolean})">
            <summary>
            Casts a strongly typed match function to a weakly typed one.
            </summary>
            <param name="f">The strongly typed function.</param>
            <returns>The weakly typed function.</returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.CastBuild``1(System.Func{`0,``0})">
            <summary>
            Casts a strongly typed build function to a weakly typed one.
            </summary>
            <typeparam name="TResult">The strong data type.</typeparam>
            <param name="f">The strongly typed function.</param>
            <returns>The weakly typed function.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncMemberSelector`2">
            <summary>
            Selects a member of an object using a <see cref="T:System.Func`2"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncMemberSelector`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncMemberSelector`2"/>
            class.
            </summary>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncMemberSelector`2.Select(System.Object)">
            <summary>
            Selects a member of an object.
            </summary>
            <param name="o">The object.</param>
            <returns>The selected member.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTemplate`1">
            <summary>
            Creates a control from a <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTemplate`1"/> class.
            </summary>
            <param name="func">The function used to create the control.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`1.Build">
            <summary>
            Creates the control.
            </summary>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTemplate`2">
            <summary>
            Creates a control from a <see cref="T:System.Func`2"/>.
            </summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTemplate`2"/> class.
            </summary>
            <param name="func">The function used to create the control.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`2.Build(`0)">
            <summary>
            Creates the control.
            </summary>
            <param name="param">The parameter.</param>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTreeDataTemplate">
            <summary>
            A template used to build hierarchical data.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.#ctor(System.Type,System.Func{System.Object,Avalonia.Controls.IControl},System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate"/> class.
            </summary>
            <param name="type">The type of data which the data template matches.</param>
            <param name="build">
            A function which when passed an object of <paramref name="type"/> returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed an object of <paramref name="type"/> returns the child
            items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.#ctor(System.Func{System.Object,System.Boolean},System.Func{System.Object,Avalonia.Controls.IControl},System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which when passed a matching object returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed a matching object returns the child items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.ItemsSelector(System.Object)">
            <summary>
            Selects the child items of an item.
            </summary>
            <param name="item">The item.</param>
            <returns>The child items, or null if no child items.</returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.IsInstance(System.Object,System.Type)">
            <summary>
            Determines of an object is of the specified type.
            </summary>
            <param name="o">The object.</param>
            <param name="t">The type.</param>
            <returns>
            True if <paramref name="o"/> is of type <paramref name="t"/>, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTreeDataTemplate`1">
            <summary>
            A template used to build hierarchical data.
            </summary>
            <typeparam name="T">The type of the template's data.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.#ctor(System.Func{`0,Avalonia.Controls.Control},System.Func{`0,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate`1"/> class.
            </summary>
            <param name="build">
            A function which when passed an object of <typeparamref name="T"/> returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed an object of <typeparamref name="T"/> returns the child
            items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.#ctor(System.Func{`0,System.Boolean},System.Func{`0,Avalonia.Controls.Control},System.Func{`0,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate`1"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which when passed a matching object returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed a matching object returns the child items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.CastMatch(System.Func{`0,System.Boolean})">
            <summary>
            Casts a typed match function to an untyped match function.
            </summary>
            <param name="f">The typed function.</param>
            <returns>The untyped function.</returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.Cast``1(System.Func{`0,``0})">
            <summary>
            Casts a function with a typed parameter to an untyped function.
            </summary>
            <typeparam name="TResult">The result.</typeparam>
            <param name="f">The typed function.</param>
            <returns>The untyped function.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.IControlTemplate">
            <summary>
            Interface representing a template used to build a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Templates.IDataTemplate">
            <summary>
            Interface representing a template used to build a control for a piece of data.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Templates.IDataTemplate.SupportsRecycling">
            <summary>
            Gets a value indicating whether the data template supports recycling of the generated
            control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.IDataTemplate.Match(System.Object)">
            <summary>
            Checks to see if this data template matches the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            True if the data template can build a control for the data, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.IDataTemplateHost">
            <summary>
            Defines an element that has a <see cref="P:Avalonia.Controls.Templates.IDataTemplateHost.DataTemplates"/> collection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Templates.IDataTemplateHost.DataTemplates">
            <summary>
            Gets the data templates for the element.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Templates.IDataTemplateHost.IsDataTemplatesInitialized">
            <summary>
            Gets a value indicating whether <see cref="P:Avalonia.Controls.Templates.IDataTemplateHost.DataTemplates"/> is initialized.
            </summary>
            <remarks>
            The <see cref="P:Avalonia.Controls.Templates.IDataTemplateHost.DataTemplates"/> property may be lazily initialized, if so this property
            indicates whether it has been initialized.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Templates.IMemberSelector">
            <summary>
            Selects a member of an object.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.IMemberSelector.Select(System.Object)">
            <summary>
            Selects a member of an object.
            </summary>
            <param name="o">The object.</param>
            <returns>The selected member.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.ITemplate`2">
            <summary>
            Creates a control based on a parameter.
            </summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.ITemplate`2.Build(`0)">
            <summary>
            Creates the control.
            </summary>
            <param name="param">The parameter.</param>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.ITreeDataTemplate">
            <summary>
            Interface representing a template used to build hierarchical data.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.ITreeDataTemplate.ItemsSelector(System.Object)">
            <summary>
            Selects the child items of an item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            An <see cref="T:Avalonia.Data.InstancedBinding"/> holding the items, or an observable that tracks the
            items. May return null if no child items.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.ITemplate`1">
            <summary>
            Creates a control.
            </summary>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.ITemplate`1.Build">
            <summary>
            Creates the control.
            </summary>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.TextBlock">
            <summary>
            A control that displays a block of text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontFamilyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontFamily"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontWeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.ForegroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Foreground"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Text"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.TextAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextWrappingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.TextWrapping"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TextBlock"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TextBlock"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Background">
            <summary>
            Gets or sets a brush used to paint the control's background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Foreground">
            <summary>
            Gets or sets a brush used to paint the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FormattedText">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.TextBlock.FormattedText"/> used to render the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.TextWrapping">
            <summary>
            Gets or sets the control's text wrapping mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetFontFamily(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontFamilyProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetFontSize(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontSizeProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetFontStyle(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontStyleProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetFontWeight(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontWeightProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetForeground(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.ForegroundProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The foreground.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetFontFamily(Avalonia.Controls.Control,Avalonia.Media.FontFamily)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontFamilyProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetFontSize(Avalonia.Controls.Control,System.Double)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontSizeProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetFontStyle(Avalonia.Controls.Control,Avalonia.Media.FontStyle)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontStyleProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetFontWeight(Avalonia.Controls.Control,Avalonia.Media.FontWeight)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontWeightProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetForeground(Avalonia.Controls.Control,Avalonia.Media.IBrush)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.ForegroundProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the <see cref="T:Avalonia.Controls.TextBlock"/> to a drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.CreateFormattedText(Avalonia.Size,System.String)">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.TextBlock.FormattedText"/> used to render the text.
            </summary>
            <param name="constraint">The constraint of the text.</param>
            <param name="text">The text to format.</param>
            <returns>A <see cref="P:Avalonia.Controls.TextBlock.FormattedText"/> object.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.InvalidateFormattedText">
            <summary>
            Invalidates <see cref="P:Avalonia.Controls.TextBlock.FormattedText"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size for the control.</param>
            <returns>The desired size.</returns>
        </member>
        <member name="P:Avalonia.Controls.TextBox.NewLine">
            <summary>
            Gets or sets which characters are inserted when Enter is pressed. Default: <see cref="P:System.Environment.NewLine"/>
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ToolTip">
            <summary>
            A control which pops up a hint when a control is hovered.
            </summary>
            <remarks>
            You will probably not want to create a <see cref="T:Avalonia.Controls.ToolTip"/> control directly: if added to
            the tree it will act as a simple <see cref="T:Avalonia.Controls.ContentControl"/> styled to look like a tooltip.
            To add a tooltip to a control, use the <see cref="F:Avalonia.Controls.ToolTip.TipProperty"/> attached property,
            assigning the content that you want displayed.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.TipProperty">
            <summary>
            Defines the ToolTip.Tip attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.IsOpenProperty">
            <summary>
            Defines the ToolTip.IsOpen attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.PlacementProperty">
            <summary>
            Defines the ToolTip.Placement property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.HorizontalOffsetProperty">
            <summary>
            Defines the ToolTip.HorizontalOffset property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.VerticalOffsetProperty">
            <summary>
            Defines the ToolTip.VerticalOffset property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.ShowDelayProperty">
            <summary>
            Defines the ToolTip.ShowDelay property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.ToolTipProperty">
            <summary>
            Stores the current <see cref="T:Avalonia.Controls.ToolTip"/> instance in the control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ToolTip"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetTip(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.Tip attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            The content to be displayed in the control's tooltip.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetTip(Avalonia.Controls.Control,System.Object)">
            <summary>
            Sets the value of the ToolTip.Tip attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">The content to be displayed in the control's tooltip.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetIsOpen(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.IsOpen attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            A value indicating whether the tool tip is visible.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetIsOpen(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Sets the value of the ToolTip.IsOpen attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">A value indicating whether the tool tip is visible.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetPlacement(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.Placement attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            A value indicating how the tool tip is positioned.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetPlacement(Avalonia.Controls.Control,Avalonia.Controls.PlacementMode)">
            <summary>
            Sets the value of the ToolTip.Placement attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">A value indicating how the tool tip is positioned.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetHorizontalOffset(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.HorizontalOffset attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            A value indicating how the tool tip is positioned.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetHorizontalOffset(Avalonia.Controls.Control,System.Double)">
            <summary>
            Sets the value of the ToolTip.HorizontalOffset attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">A value indicating how the tool tip is positioned.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetVerticalOffset(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.VerticalOffset attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            A value indicating how the tool tip is positioned.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetVerticalOffset(Avalonia.Controls.Control,System.Double)">
            <summary>
            Sets the value of the ToolTip.VerticalOffset attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">A value indicating how the tool tip is positioned.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetShowDelay(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.ShowDelay attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            A value indicating the time, in milliseconds, before a tool tip opens.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetShowDelay(Avalonia.Controls.Control,System.Int32)">
            <summary>
            Sets the value of the ToolTip.ShowDelay attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">A value indicating the time, in milliseconds, before a tool tip opens.</param>
        </member>
        <member name="T:Avalonia.Controls.ToolTipService">
            <summary>
            Handles <see cref="T:Avalonia.Controls.ToolTip"/> interaction with controls.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToolTipService.TipChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            called when the <see cref="F:Avalonia.Controls.ToolTip.TipProperty"/> property changes on a control.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTipService.ControlPointerEnter(System.Object,Avalonia.Input.PointerEventArgs)">
            <summary>
            Called when the pointer enters a control with an attached tooltip.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTipService.ControlPointerLeave(System.Object,Avalonia.Input.PointerEventArgs)">
            <summary>
            Called when the pointer leaves a control with an attached tooltip.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.TopLevel">
            <summary>
            Base class for top-level widgets.
            </summary>
            <remarks>
            This class acts as a base for top level widget.
            It handles scheduling layout, styling and rendering as well as
            tracking the widget's <see cref="P:Avalonia.Controls.TopLevel.ClientSize"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.ClientSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TopLevel.ClientSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.PointerOverElementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.IInputRoot.PointerOverElement"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TopLevel"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.#ctor(Avalonia.Platform.ITopLevelImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TopLevel"/> class.
            </summary>
            <param name="impl">The platform-specific window implementation.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.#ctor(Avalonia.Platform.ITopLevelImpl,Avalonia.IAvaloniaDependencyResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TopLevel"/> class.
            </summary>
            <param name="impl">The platform-specific window implementation.</param>
            <param name="dependencyResolver">
            The dependency resolver to use. If null the default dependency resolver will be used.
            </param>
        </member>
        <member name="E:Avalonia.Controls.TopLevel.Opened">
            <summary>
            Fired when the window is opened.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TopLevel.Closed">
            <summary>
            Fired when the window is closed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.ClientSize">
            <summary>
            Gets or sets the client size of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.PlatformImpl">
            <summary>
            Gets the platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Renderer">
            <summary>
            Gets the renderer for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#AccessKeyHandler">
            <summary>
            Gets the access key handler for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#KeyboardNavigationHandler">
            <summary>
            Gets or sets the keyboard navigation handler for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#PointerOverElement">
            <summary>
            Gets or sets the input element that the pointer is currently over.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#MouseDevice">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#ShowAccessKeys">
            <summary>
            Gets or sets a value indicating whether access keys are shown in the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Layout#ILayoutRoot#MaxClientSize">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Layout#ILayoutRoot#LayoutScaling">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Rendering#IRenderRoot#RenderScaling">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.CreateRenderTarget">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.Avalonia#Rendering#IRenderRoot#Invalidate(Avalonia.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.Avalonia#Rendering#IRenderRoot#PointToClient(Avalonia.PixelPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.Avalonia#Rendering#IRenderRoot#PointToScreen(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.CreateLayoutManager">
            <summary>
            Creates the layout manager for this <see cref="T:Avalonia.Controls.TopLevel" />.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandlePaint(Avalonia.Rect)">
            <summary>
            Handles a paint notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Resized"/>.
            </summary>
            <param name="rect">The dirty area.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleClosed">
            <summary>
            Handles a closed notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Closed"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleResized(Avalonia.Size)">
            <summary>
            Handles a resize notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Resized"/>.
            </summary>
            <param name="clientSize">The new client size.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleScalingChanged(System.Double)">
            <summary>
            Handles a window scaling change notification from 
            <see cref="P:Avalonia.Platform.ITopLevelImpl.ScalingChanged"/>.
            </summary>
            <param name="scaling">The window scaling.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.OnOpened(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.TopLevel.Opened"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.TryGetService``1(Avalonia.IAvaloniaDependencyResolver)">
            <summary>
            Tries to get a service from an <see cref="T:Avalonia.IAvaloniaDependencyResolver"/>, logging a
            warning if not found.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="resolver">The resolver.</param>
            <returns>The service.</returns>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleApplicationExiting">
            <summary>
            Handles the application exiting, either from the last window closing, or a call to <see cref="M:Avalonia.Controls.IApplicationLifecycle.Exit"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleInput(Avalonia.Input.Raw.RawInputEventArgs)">
            <summary>
            Handles input from <see cref="P:Avalonia.Platform.ITopLevelImpl.Input"/>.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.TreeView">
            <summary>
            Displays a hierarchical tree of data.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeView.AutoScrollToSelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeView.SelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeView.SelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeView.SelectedItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeView.SelectedItems"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeView.SelectionModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeView.SelectionMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TreeView"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TreeView.SelectionChanged">
            <summary>
            Occurs when the control's selection changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.ItemContainerGenerator">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Generators.ITreeItemContainerGenerator"/> for the tree view.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.AutoScrollToSelectedItem">
            <summary>
            Gets or sets a value indicating whether to automatically scroll to newly selected items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.SubscribeToSelectedItems">
            <summary>
            Subscribes to the <see cref="P:Avalonia.Controls.TreeView.SelectedItems"/> CollectionChanged event, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.SelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.TreeView.SelectedItems"/> CollectionChanged event is raised.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.UnsubscribeFromSelectedItems">
            <summary>
            Unsubscribes from the <see cref="P:Avalonia.Controls.TreeView.SelectedItems"/> CollectionChanged event, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeView.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeView.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeView.UpdateSelectionFromContainer(Avalonia.Controls.IControl,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection for an item based on user interaction.
            </summary>
            <param name="container">The container.</param>
            <param name="select">Whether the item should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.FindFirstNode(Avalonia.Controls.TreeView,Avalonia.Controls.TreeViewItem,Avalonia.Controls.TreeViewItem)">
            <summary>
            Find which node is first in hierarchy.
            </summary>
            <param name="treeView">Search root.</param>
            <param name="nodeA">Nodes to find.</param>
            <param name="nodeB">Node to find.</param>
            <returns>Found first node.</returns>
        </member>
        <member name="M:Avalonia.Controls.TreeView.GetItemsInRange(Avalonia.Controls.TreeViewItem,Avalonia.Controls.TreeViewItem)">
            <summary>
            Returns all items that belong to containers between <paramref name="from"/> and <paramref name="to"/>.
            The range is inclusive.
            </summary>
            <param name="from">From container.</param>
            <param name="to">To container.</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.UpdateSelectionFromEventSource(Avalonia.Interactivity.IInteractive,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection based on an event that may have originated in a container that 
            belongs to the control.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <param name="select">Whether the container should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
            <returns>
            True if the event originated from a container that belongs to the control; otherwise
            false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.TreeView.GetContainerFromEventSource(Avalonia.Interactivity.IInteractive)">
            <summary>
            Tries to get the container that was the source of an event.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <returns>The container or null if the event did not originate in a container.</returns>
        </member>
        <member name="M:Avalonia.Controls.TreeView.ContainerMaterialized(System.Object,Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <summary>
            Called when a new item container is materialized, to set its selected state.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.MarkContainerSelected(Avalonia.Controls.IControl,System.Boolean)">
            <summary>
            Sets a container's 'selected' class or <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/>.
            </summary>
            <param name="container">The container.</param>
            <param name="selected">Whether the control is selected</param>
        </member>
        <member name="T:Avalonia.Controls.TreeViewItem">
            <summary>
            An item in a <see cref="T:Avalonia.Controls.TreeView"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeViewItem.IsExpandedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeViewItem.IsExpanded"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeViewItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeViewItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeViewItem.LevelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeViewItem.Level"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TreeViewItem"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeViewItem.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the item is expanded to show its children.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeViewItem.IsSelected">
            <summary>
            Gets or sets the selection state of the item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeViewItem.Level">
            <summary>
            Gets the level/indentation of the item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeViewItem.ItemContainerGenerator">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Generators.ITreeItemContainerGenerator"/> for the tree view.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.UserControl">
            <summary>
            Provides the base class for defining a new control that encapsulates related existing controls and provides its own logic.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.UserControl.Avalonia#Controls#INameScope#Registered">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.UserControl.Avalonia#Controls#INameScope#Unregistered">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.UserControl.Avalonia#Controls#INameScope#Register(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.UserControl.Avalonia#Controls#INameScope#Find(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.UserControl.Avalonia#Controls#INameScope#Unregister(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Utils.GridLayout">
            <summary>
            Contains algorithms that can help to measure and arrange a Grid.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.#ctor(Avalonia.Controls.ColumnDefinitions)">
            <summary>
            Initialize a new <see cref="T:Avalonia.Controls.Utils.GridLayout"/> instance from the column definitions.
            The instance doesn't care about whether the definitions are rows or columns.
            It will not calculate the column or row differently.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.#ctor(Avalonia.Controls.RowDefinitions)">
            <summary>
            Initialize a new <see cref="T:Avalonia.Controls.Utils.GridLayout"/> instance from the row definitions.
            The instance doesn't care about whether the definitions are rows or columns.
            It will not calculate the column or row differently.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Utils.GridLayout.LayoutTolerance">
            <summary>
            Gets the layout tolerance. If any length offset is less than this value, we will treat them the same.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Utils.GridLayout._conventions">
            <summary>
            Gets all the length conventions that come from column/row definitions.
            These conventions provide cell limitations, such as the expected pixel length, the min/max pixel length and the * count.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Utils.GridLayout._additionalConventions">
            <summary>
            Gets all the length conventions that come from the grid children.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.AppendMeasureConventions``1(System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Int32,System.Int32}},System.Func{``0,System.Double})">
            <summary>
            Appending these elements into the convention list helps lay them out according to their desired sizes.
            <para/>
            Some elements are not only in a single grid cell, they have one or more column/row spans,
            and these elements may affect the grid layout especially the measuring procedure.<para/>
            Append these elements into the convention list can help to layout them correctly through
            their desired size. Only a small subset of children need to be measured before layout starts
            and they will be called via the<paramref name="getDesiredLength"/> callback.
            </summary>
            <typeparam name="T">The grid children type.</typeparam>
            <param name="source">
            Contains the safe column/row index and its span.
            Notice that we will not verify whether the range is in the column/row count,
            so you should get the safe column/row info first.
            </param>
            <param name="getDesiredLength">
            This callback will be called if the <see cref="T:Avalonia.Controls.Utils.GridLayout"/> thinks that a child should be
            measured first. Usually, these are the children that have the * or Auto length.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.Measure(System.Double,System.Collections.Generic.IReadOnlyList{Avalonia.Controls.Utils.GridLayout.LengthConvention})">
            <summary>
            Run measure procedure according to the <paramref name="containerLength"/> and gets the <see cref="T:Avalonia.Controls.Utils.GridLayout.MeasureResult"/>.
            </summary>
            <param name="containerLength">
            The container length. Usually, it is the constraint of the <see cref="M:Avalonia.Layout.Layoutable.MeasureOverride(Avalonia.Size)"/> method.
            </param>
            <param name="conventions">
            Overriding conventions that allows the algorithm to handle external inputa 
            </param>
            <returns>
            The measured result that containing the desired size and all the column/row lengths.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.Arrange(System.Double,Avalonia.Controls.Utils.GridLayout.MeasureResult)">
            <summary>
            Run arrange procedure according to the <paramref name="measure"/> and gets the <see cref="T:Avalonia.Controls.Utils.GridLayout.ArrangeResult"/>.
            </summary>
            <param name="finalLength">
            The container length. Usually, it is the finalSize of the <see cref="M:Avalonia.Layout.Layoutable.ArrangeOverride(Avalonia.Size)"/> method.
            </param>
            <param name="measure">
            The result that the measuring procedure returns. If it is null, a new measure procedure will run.
            </param>
            <returns>
            The measured result that containing the desired size and all the column/row length.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.ApplyAdditionalConventionsForAuto(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.Utils.GridLayout.LengthConvention},System.Int32,System.Double)">
            <summary>
            Use the <see cref="F:Avalonia.Controls.Utils.GridLayout._additionalConventions"/> to calculate the fixed length of the Auto column/row.
            </summary>
            <param name="conventions">The convention list that all the * with minimum length are fixed.</param>
            <param name="index">The column/row index that should be fixed.</param>
            <param name="starUnitLength">The unit * length for the current rest length.</param>
            <returns>The final length of the Auto length column/row.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.AggregateAdditionalConventionsForStars(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.Utils.GridLayout.LengthConvention})">
            <summary>
            Calculate the total desired length of all the * length.
            Bug Warning:
            - The behavior of this method is undefined! Different UI Frameworks have different behaviors.
            - We ignore all the span columns/rows and just take single cells into consideration.
            </summary>
            <param name="conventions">All the conventions that have almost been fixed except the rest *.</param>
            <returns>The total desired length of all the * length.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.ExpandStars(System.Collections.Generic.IEnumerable{Avalonia.Controls.Utils.GridLayout.LengthConvention},System.Double)">
            <summary>
            This method implements the last procedure (M7/7) of measure.
            It expands all the * length to the fixed length according to the <paramref name="constraint"/>.
            </summary>
            <param name="conventions">All the conventions that have almost been fixed except the remaining *.</param>
            <param name="constraint">The container length.</param>
            <returns>The final pixel length list.</returns>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.Clip(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            If the container length is not infinity. It may be not enough to contain all the columns/rows.
            We should clip the columns/rows that have been out of the container bounds.
            Note: This method may change the items value of <paramref name="lengthList"/>.
            </summary>
            <param name="lengthList">A list of all the column widths and row heights with a fixed pixel length</param>
            <param name="constraint">the container length. It can be positive infinity.</param>
        </member>
        <member name="T:Avalonia.Controls.Utils.GridLayout.LengthConvention">
            <summary>
            Contains the convention of each column/row.
            This is mostly the same as <see cref="T:Avalonia.Controls.RowDefinition"/> or <see cref="T:Avalonia.Controls.ColumnDefinition"/>.
            We use this because we can treat the column and the row the same.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.LengthConvention.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Avalonia.Controls.Utils.GridLayout.LengthConvention"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.LengthConvention.#ctor(Avalonia.Controls.GridLength,System.Double,System.Double)">
            <summary>
            Initialize a new instance of <see cref="T:Avalonia.Controls.Utils.GridLayout.LengthConvention"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.LengthConvention.Length">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.GridLength"/> of a column or a row.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.LengthConvention.MinLength">
            <summary>
            Gets the minimum convention for a column or a row.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.LengthConvention.MaxLength">
            <summary>
            Gets the maximum convention for a column or a row.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.LengthConvention.Fix(System.Double)">
            <summary>
            Fix the <see cref="T:Avalonia.Controls.Utils.GridLayout.LengthConvention"/>.
            If all columns/rows are fixed, we can get the size of all columns/rows in pixels.
            </summary>
            <param name="pixel">
            The pixel length that should be used to fix the convention.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If the convention is pixel length, this exception will throw.
            </exception>
        </member>
        <member name="F:Avalonia.Controls.Utils.GridLayout.LengthConvention._isFixed">
            <summary>
            Gets a value that indicates whether this convention is fixed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.LengthConvention.DebuggerDisplay">
            <summary>
            Helps the debugger to display the intermediate column/row calculation result.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.LengthConvention.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.LengthConvention.Clone">
            <summary>
            Get a deep copy of this convention list.
            We need this because we want to store some intermediate states.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Utils.GridLayout.AdditionalLengthConvention">
            <summary>
            Contains the convention that comes from the grid children.
            Some children span multiple columns or rows, so even a simple column/row can have multiple conventions.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.AdditionalLengthConvention.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initialize a new instance of <see cref="T:Avalonia.Controls.Utils.GridLayout.AdditionalLengthConvention"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.AdditionalLengthConvention.Index">
            <summary>
            Gets the start index of this additional convention.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.AdditionalLengthConvention.Span">
            <summary>
            Gets the span of this additional convention.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.AdditionalLengthConvention.Min">
            <summary>
            Gets the minimum length of this additional convention.
            This value is usually provided by the child's desired length.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.AdditionalLengthConvention.DebuggerDisplay">
            <summary>
            Helps the debugger to display the intermediate column/row calculation result.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Utils.GridLayout.MeasureResult">
            <summary>
            Stores the result of the measuring procedure.
            This result can be used to measure children and assign the desired size.
            Passing this result to <see cref="M:Avalonia.Controls.Utils.GridLayout.Arrange(System.Double,Avalonia.Controls.Utils.GridLayout.MeasureResult)"/> can reduce calculation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.MeasureResult.#ctor(System.Double,System.Double,System.Double,System.Collections.Generic.IReadOnlyList{Avalonia.Controls.Utils.GridLayout.LengthConvention},System.Collections.Generic.IReadOnlyList{System.Double},System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Initialize a new instance of <see cref="T:Avalonia.Controls.Utils.GridLayout.MeasureResult"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.MeasureResult.ContainerLength">
            <summary>
            Gets the container length for this result.
            This property will be used by <see cref="M:Avalonia.Controls.Utils.GridLayout.Arrange(System.Double,Avalonia.Controls.Utils.GridLayout.MeasureResult)"/> to determine whether to measure again or not.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.MeasureResult.DesiredLength">
            <summary>
            Gets the desired length of this result.
            Just return this value as the desired size in <see cref="M:Avalonia.Layout.Layoutable.MeasureOverride(Avalonia.Size)"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.MeasureResult.GreedyDesiredLength">
            <summary>
            Gets the desired length if the container has infinite length.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.MeasureResult.LeanLengthList">
            <summary>
            Contains the column/row calculation intermediate result.
            This value is used by <see cref="M:Avalonia.Controls.Utils.GridLayout.Arrange(System.Double,Avalonia.Controls.Utils.GridLayout.MeasureResult)"/> for reducing repeat calculation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.MeasureResult.LengthList">
            <summary>
            Gets the length list for each column/row.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Utils.GridLayout.ArrangeResult">
            <summary>
            Stores the result of the measuring procedure.
            This result can be used to arrange children and assign the render size.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.GridLayout.ArrangeResult.#ctor(System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Initialize a new instance of <see cref="T:Avalonia.Controls.Utils.GridLayout.ArrangeResult"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.GridLayout.ArrangeResult.LengthList">
            <summary>
            Gets the length list for each column/row.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Utils.ISelectionAdapter">
            <summary>
            Defines an item collection, selection members, and key handling for the
            selection adapter contained in the drop-down portion of an
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.ISelectionAdapter.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The currently selected item.</value>
        </member>
        <member name="E:Avalonia.Controls.Utils.ISelectionAdapter.SelectionChanged">
            <summary>
            Occurs when the
            <see cref="P:Avalonia.Controls.Utils.ISelectionAdapter.SelectedItem" />
            property value changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.ISelectionAdapter.Items">
            <summary>
            Gets or sets a collection that is used to generate content for the
            selection adapter.
            </summary>
            <value>The collection that is used to generate content for the
            selection adapter.</value>
        </member>
        <member name="E:Avalonia.Controls.Utils.ISelectionAdapter.Commit">
            <summary>
            Occurs when a selected item is not cancelled and is committed as the
            selected item.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Utils.ISelectionAdapter.Cancel">
            <summary>
            Occurs when a selection has been canceled.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.ISelectionAdapter.HandleKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:Avalonia.Input.InputElement.KeyDown" /> event that occurs
            when a key is pressed while the drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> has focus.
            </summary>
            <param name="e">A <see cref="T:Avalonia.Input.KeyEventArgs" />
            that contains data about the
            <see cref="E:Avalonia.Input.InputElement.KeyDown" /> event.</param>
        </member>
        <member name="T:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter">
            <summary>
            Represents the selection adapter contained in the drop-down portion of
            an <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter._selector">
            <summary>
            The SelectingItemsControl instance.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.IgnoringSelectionChanged">
            <summary>
            Gets or sets a value indicating whether the selection change event 
            should not be fired.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectorControl">
            <summary>
            Gets or sets the underlying
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.
            </summary>
            <value>The underlying
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.</value>
        </member>
        <member name="E:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectionChanged">
            <summary>
            Occurs when the
            <see cref="P:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectedItem" />
            property value changes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Commit">
            <summary>
            Occurs when an item is selected and is committed to the underlying
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Cancel">
            <summary>
            Occurs when a selection is canceled before it is committed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter" />
            class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.#ctor(Avalonia.Controls.Primitives.SelectingItemsControl)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapterr" />
            class with the specified
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.
            </summary>
            <param name="selector">The
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" /> control
            to wrap as a
            <see cref="T:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter" />.</param>
        </member>
        <member name="P:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectedItem">
            <summary>
            Gets or sets the selected item of the selection adapter.
            </summary>
            <value>The selected item of the underlying selection adapter.</value>
        </member>
        <member name="P:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Items">
            <summary>
            Gets or sets a collection that is used to generate the content of
            the selection adapter.
            </summary>
            <value>The collection used to generate content for the selection
            adapter.</value>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.ResetScrollViewer">
            <summary>
            If the control contains a ScrollViewer, this will reset the viewer 
            to be scrolled to the top.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnSelectorPointerReleased(System.Object,Avalonia.Input.PointerReleasedEventArgs)">
            <summary>
            Handles the mouse left button up event on the selector control.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnSelectionChanged(System.Object,Avalonia.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event on the SelectingItemsControl control.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The selection changed event data.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectedIndexIncrement">
            <summary>
            Increments the
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex" />
            property of the underlying
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.SelectedIndexDecrement">
            <summary>
            Decrements the
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex" />
            property of the underlying
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl" />
            control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.HandleKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:Avalonia.Input.InputElement.KeyDown" /> event that occurs
            when a key is pressed while the drop-down portion of the
            <see cref="T:Avalonia.Controls.AutoCompleteBox" /> has focus.
            </summary>
            <param name="e">A <see cref="T:Avalonia.Input.KeyEventArgs" />
            that contains data about the
            <see cref="E:Avalonia.Input.InputElement.KeyDown" /> event.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnCommit">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Commit" />
            event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnCommit(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Fires the Commit event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnCancel">
            <summary>
            Raises the
            <see cref="E:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.Cancel" />
            event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.OnCancel(System.Object,Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Fires the Cancel event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter.AfterAdapterAction">
            <summary>
            Change the selection after the actions are complete.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SharedSizeScopeHost">
            <summary>
            Shared size scope implementation.
            Shares the size information between participating grids.
            An instance of this class is attached to every <see cref="T:Avalonia.Controls.Control"/> that has its
            IsSharedSizeScope property set to true.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache">
            <summary>
            Class containing the measured rows/columns for a single grid.
            Monitors changes to the row/column collections as well as the SharedSizeGroup changes
            for the individual items in those collections.
            Notifies the <see cref="T:Avalonia.Controls.SharedSizeScopeHost"/> of SharedSizeGroup changes.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache.UpdateMeasureResult(Avalonia.Controls.Utils.GridLayout.MeasureResult,Avalonia.Controls.Utils.GridLayout.MeasureResult)">
            <summary>
            Updates the Results collection with Grid Measure results. 
            </summary>
            <param name="rowResult">Result of the GridLayout.Measure method for the RowDefinitions in the grid.</param>
            <param name="columnResult">Result of the GridLayout.Measure method for the ColumnDefinitions in the grid.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache.InvalidateMeasure">
            <summary>
            Clears the measurement cache, in preparation for the Measure pass.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache.Dispose">
            <summary>
            Clears the <see cref="T:System.IObservable`1"/> subscriptions.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache.Grid">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache.Grid"/> for which this cache has been created.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache.MeasurementState">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache.MeasurementState"/> of this cache.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache.Results">
            <summary>
            Gets the list of <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/> instances.
            </summary>
            <remarks>
            The list is a 1-1 map of the concatenation of RowDefinitions and ColumnDefinitions
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult">
            <summary>
            Class containing the Measure result for a single Row/Column in a grid.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult.Definition">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.RowDefinition"/>/<see cref="T:Avalonia.Controls.ColumnDefinition"/> related to this <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/>
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult.MeasuredResult">
            <summary>
            Gets or sets the actual result of the Measure operation for this column.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult.MinLength">
            <summary>
            Gets or sets the Minimum constraint for a Row/Column - relevant for star Rows/Columns in unconstrained grids.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult.SizeGroup">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Controls.SharedSizeScopeHost.Group"/> that this result belongs to.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult.OwningGrid">
            <summary>
            Gets the Grid that is the parent of the Row/Column
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult.GetPriorityLength">
            <summary>
            Calculates the effective length that this Row/Column wishes to enforce in the SharedSizeGroup.
            </summary>
            <returns>A tuple of length and the priority in the shared size group.</returns>
        </member>
        <member name="T:Avalonia.Controls.SharedSizeScopeHost.LentgthGatherer">
            <summary>
            Visitor class used to gather the final length for a given SharedSizeGroup.
            </summary>
            <remarks>
            The values are applied according to priorities defined in <see cref="M:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult.GetPriorityLength"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.LentgthGatherer.Length">
            <summary>
            Gets the final Length to be applied to every Row/Column in a SharedSizeGroup
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.LentgthGatherer.Visit(Avalonia.Controls.SharedSizeScopeHost.MeasurementResult)">
            <summary>
            Visits the <paramref name="result"/> applying the result of <see cref="M:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult.GetPriorityLength"/> to its internal cache.
            </summary>
            <param name="result">The <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/> instance to visit.</param>
        </member>
        <member name="T:Avalonia.Controls.SharedSizeScopeHost.Group">
            <summary>
            Representation of a SharedSizeGroup, containing Rows/Columns with the same SharedSizeGroup property value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.Group.Name">
            <summary>
            Gets the name of the SharedSizeGroup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.Group.Results">
            <summary>
            Gets the collection of the <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/> instances.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SharedSizeScopeHost.Group.CalculatedLength">
            <summary>
            Gets the final, calculated length for all Rows/Columns in the SharedSizeGroup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.Group.Reset">
            <summary>
            Clears the previously cached result in preparation for measurement.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.Group.Add(Avalonia.Controls.SharedSizeScopeHost.MeasurementResult)">
            <summary>
            Ads a measurement result to this group and sets it's <see cref="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult.SizeGroup"/> property
            to this instance.
            </summary>
            <param name="result">The <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/> to include in this group.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.Group.Remove(Avalonia.Controls.SharedSizeScopeHost.MeasurementResult)">
            <summary>
            Removes the measurement result from this group and clears its <see cref="P:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult.SizeGroup"/> value.
            </summary>
            <param name="result">The <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/> to clear.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.Dispose">
            <summary>
            Removes the SharedSizeScope and notifies all affected grids of the change.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.RegisterGrid(Avalonia.Controls.Grid)">
            <summary>
            Registers the grid in this SharedSizeScope, to be called when the grid is added to the visual tree. 
            </summary>
            <param name="toAdd">The <see cref="T:Avalonia.Controls.Grid"/> to add to this scope.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.UnegisterGrid(Avalonia.Controls.Grid)">
            <summary>
            Removes the registration for a grid in this SharedSizeScope.
            </summary>
            <param name="toRemove">The <see cref="T:Avalonia.Controls.Grid"/> to remove.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.ParticipatesInScope(Avalonia.Controls.Grid)">
            <summary>
            Helper method to check if a grid needs to forward its Mesure results to, and requrest Arrange results from this scope.
            </summary>
            <param name="toCheck">The <see cref="T:Avalonia.Controls.Grid"/> that should be checked.</param>
            <returns>True if the grid should forward its calls.</returns>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.InvalidateMeasure(Avalonia.Controls.Grid)">
            <summary>
            Notifies the SharedSizeScope that a grid had requested its measurement to be invalidated.
            Forwards the same call to all affected grids in this scope.
            </summary>
            <param name="grid">The <see cref="T:Avalonia.Controls.Grid"/> that had it's Measure invalidated.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.UpdateMeasureStatus(Avalonia.Controls.Grid,Avalonia.Controls.Utils.GridLayout.MeasureResult,Avalonia.Controls.Utils.GridLayout.MeasureResult)">
            <summary>
            Updates the measurement cache with the results of the <paramref name="grid"/> measurement pass.
            </summary>
            <param name="grid">The <see cref="T:Avalonia.Controls.Grid"/> that has been measured.</param>
            <param name="rowResult">Measurement result for the grid's <see cref="T:Avalonia.Controls.RowDefinitions"/></param>
            <param name="columnResult">Measurement result for the grid's <see cref="T:Avalonia.Controls.ColumnDefinitions"/></param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.HandleArrange(Avalonia.Controls.Grid,Avalonia.Controls.Utils.GridLayout.MeasureResult,Avalonia.Controls.Utils.GridLayout.MeasureResult)">
            <summary>
            Calculates the measurement result including the impact of any SharedSizeGroups that might affect this grid.
            </summary>
            <param name="grid">The <see cref="T:Avalonia.Controls.Grid"/> that is being Arranged</param>
            <param name="rowResult">The <paramref name="grid"/>'s cached measurement result.</param>
            <param name="columnResult">The <paramref name="grid"/>'s cached measurement result.</param>
            <returns>Row and column measurement result updated with the SharedSizeScope constraints.</returns>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.InvalidateMeasureImpl(Avalonia.Controls.Grid)">
            <summary>
            Invalidates the measure of all grids affected by the SharedSizeGroups contained within.
            </summary>
            <param name="grid">The <see cref="T:Avalonia.Controls.Grid"/> that is being invalidated.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.SharedGroupChanged(System.ValueTuple{System.String,System.String,Avalonia.Controls.SharedSizeScopeHost.MeasurementResult})">
            <summary>
            <see cref="T:System.IObserver`1"/> callback notifying the scope that a <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/> has changed its
            SharedSizeGroup
            </summary>
            <param name="change">Old and New name (either can be null) of the SharedSizeGroup, as well as the result.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.Arrange(System.Collections.Generic.IReadOnlyList{Avalonia.Controls.DefinitionBase},Avalonia.Controls.Utils.GridLayout.MeasureResult)">
            <summary>
            Handles the impact of SharedSizeGroups on the Arrange of <see cref="T:Avalonia.Controls.RowDefinitions"/>/<see cref="T:Avalonia.Controls.ColumnDefinitions"/>
            </summary>
            <param name="definitions">Rows/Columns that were measured</param>
            <param name="measureResult">The initial measurement result.</param>
            <returns>Modified measure result</returns>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.AddGridToScopes(Avalonia.Controls.SharedSizeScopeHost.MeasurementCache)">
            <summary>
            Adds all measurement results for a grid to their repsective scopes.
            </summary>
            <param name="cache">The <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache"/> for a grid to be added.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.AddToGroup(System.String,Avalonia.Controls.SharedSizeScopeHost.MeasurementResult)">
            <summary>
            Handles adding the <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/> to a SharedSizeGroup.
            Does nothing for empty SharedSizeGroups.
            </summary>
            <param name="scopeName">The name (can be null or empty) of the group to add the <paramref name="result"/> to.</param>
            <param name="result">The <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/> to add to a scope.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.RemoveGridFromScopes(Avalonia.Controls.SharedSizeScopeHost.MeasurementCache)">
            <summary>
            Removes all measurement results for a grid from their respective scopes.
            </summary>
            <param name="cache">The <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementCache"/> for a grid to be removed.</param>
        </member>
        <member name="M:Avalonia.Controls.SharedSizeScopeHost.RemoveFromGroup(System.String,Avalonia.Controls.SharedSizeScopeHost.MeasurementResult)">
            <summary>
            Handles removing the <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/> from a SharedSizeGroup.
            Does nothing for empty SharedSizeGroups.
            </summary>
            <param name="scopeName">The name (can be null or empty) of the group to remove the <paramref name="result"/> from.</param>
            <param name="result">The <see cref="T:Avalonia.Controls.SharedSizeScopeHost.MeasurementResult"/> to remove from a scope.</param>
        </member>
        <member name="T:Avalonia.Controls.Viewbox">
            <summary>
            Viewbox is used to scale single child.
            </summary>
            <seealso cref="T:Avalonia.Controls.Decorator" />
        </member>
        <member name="F:Avalonia.Controls.Viewbox.StretchProperty">
            <summary>
            The stretch property
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Viewbox.Stretch">
            <summary>
            Gets or sets the stretch mode, 
            which determines how child fits into the available space.
            </summary>
            <value>
            The stretch.
            </value>
        </member>
        <member name="T:Avalonia.Controls.SizeToContent">
            <summary>
            Determines how a <see cref="T:Avalonia.Controls.Window"/> will size itself to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.Manual">
            <summary>
            The window will not automatically size itself to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.Width">
            <summary>
            The window will size itself horizontally to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.Height">
            <summary>
            The window will size itself vertically to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.WidthAndHeight">
            <summary>
            The window will size itself horizontally and vertically to fit its content.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Window">
            <summary>
            A top-level window.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.SizeToContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.SizeToContent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.HasSystemDecorationsProperty">
            <summary>
            Enables or disables system window decorations (title bar, buttons, etc)
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.ShowInTaskbarProperty">
            <summary>
            Enables or disables the taskbar icon
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.WindowStateProperty">
            <summary>
            Represents the current window state (normal, minimized, maximized)
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.TitleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.Title"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.IconProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.Icon"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.WindowStartupLocationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.WindowStartupLocation"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Window"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Window"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.#ctor(Avalonia.Platform.IWindowImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Window"/> class.
            </summary>
            <param name="impl">The window implementation.</param>
        </member>
        <member name="E:Avalonia.Controls.Window.Avalonia#Controls#INameScope#Registered">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.Window.Avalonia#Controls#INameScope#Unregistered">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Window.PlatformImpl">
            <summary>
            Gets the platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.SizeToContent">
            <summary>
            Gets or sets a value indicating how the window will size itself to fit its content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.Title">
            <summary>
            Gets or sets the title of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.HasSystemDecorations">
            <summary>
            Enables or disables system window decorations (title bar, buttons, etc)
            </summary>
            
        </member>
        <member name="P:Avalonia.Controls.Window.ShowInTaskbar">
            <summary>
            Enables or disables the taskbar icon
            </summary>
            
        </member>
        <member name="P:Avalonia.Controls.Window.WindowState">
            <summary>
            Gets or sets the minimized/maximized state of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.CanResize">
            <summary>
            Enables or disables resizing of the window.
            Note that if <see cref="P:Avalonia.Controls.Window.HasSystemDecorations"/> is set to False then this property
            has no effect and should be treated as a recommendation for the user setting HasSystemDecorations.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.Icon">
            <summary>
            Gets or sets the icon of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.WindowStartupLocation">
            <summary>
            Gets or sets the startup location of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.Avalonia#Layout#ILayoutRoot#MaxClientSize">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Window.Avalonia#Styling#IStyleable#StyleKey">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.Window.Closing">
            <summary>
            Fired before a window is closed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.Close">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.Close(System.Object)">
            <summary>
            Closes a dialog window with the specified result.
            </summary>
            <param name="dialogResult">The dialog result.</param>
            <remarks>
            When the window is shown with the <see cref="M:Avalonia.Controls.Window.ShowDialog``1(Avalonia.Controls.Window)"/> method, the
            resulting task will produce the <see cref="F:Avalonia.Controls.Window._dialogResult"/> value when the window
            is closed.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Window.HandleClosing">
            <summary>
            Handles a closing notification from <see cref="P:Avalonia.Platform.IWindowImpl.Closing"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.Hide">
            <summary>
            Hides the window but does not close it.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.ShowDialog(Avalonia.Controls.Window)">
            <summary>
            Shows the window as a dialog.
            </summary>
            <param name="owner">The dialog's owner window.</param>
            <returns>
            A task that can be used to track the lifetime of the dialog.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Window.ShowDialog``1(Avalonia.Controls.Window)">
            <summary>
            Shows the window as a dialog.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by the dialog.
            </typeparam>
            <param name="owner">The dialog's owner window.</param>
            <returns>.
            A task that can be used to retrieve the result of the dialog when it closes.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Window.ShowDialog``1(Avalonia.Platform.IWindowImpl)">
            <summary>
            Shows the window as a dialog.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by the dialog.
            </typeparam>
            <param name="owner">The dialog's owner window.</param>
            <returns>.
            A task that can be used to retrieve the result of the dialog when it closes.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Window.Avalonia#Controls#INameScope#Register(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Window.Avalonia#Controls#INameScope#Find(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Window.Avalonia#Controls#INameScope#Unregister(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Window.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Window.HandleResized(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.WindowBase">
            <summary>
            Base class for top-level windows.
            </summary>
            <remarks>
            This class acts as a base for top level windows such as <see cref="T:Avalonia.Controls.Window"/> and
            <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/>. It handles scheduling layout, styling and rendering as well as
            tracking the window <see cref="P:Avalonia.Controls.TopLevel.ClientSize"/> and <see cref="P:Avalonia.Controls.WindowBase.IsActive"/> state.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.WindowBase.IsActiveProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.WindowBase.IsActive"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowBase.OwnerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.WindowBase.Owner"/> property.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.WindowBase.Activated">
            <summary>
            Fired when the window is activated.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.WindowBase.Deactivated">
            <summary>
            Fired when the window is deactivated.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.WindowBase.PositionChanged">
            <summary>
            Fired when the window position is changed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowBase.IsActive">
            <summary>
            Gets a value that indicates whether the window is active.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowBase.Position">
            <summary>
            Gets or sets the window position in screen coordinates.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowBase.AutoSizing">
            <summary>
            Whether an auto-size operation is in progress.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowBase.Owner">
            <summary>
            Gets or sets the owner of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WindowBase.Topmost">
            <summary>
            Gets or sets whether this window appears on top of all other windows
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.Activate">
            <summary>
            Activates the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.Hide">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.BeginAutoSizing">
            <summary>
            Begins an auto-resize operation.
            </summary>
            <returns>A disposable used to finish the operation.</returns>
            <remarks>
            When an auto-resize operation is in progress any resize events received will not be
            cause the new size to be written to the <see cref="P:Avalonia.Layout.Layoutable.Width"/> and
            <see cref="P:Avalonia.Layout.Layoutable.Height"/> properties.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.ArrangeOverride(Avalonia.Size)">
            <summary>
            Carries out the arrange pass of the window.
            </summary>
            <param name="finalSize">The final window size.</param>
            <returns>The <paramref name="finalSize"/> parameter unchanged.</returns>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.EnsureInitialized">
            <summary>
            Ensures that the window is initialized.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.HandleResized(Avalonia.Size)">
            <summary>
            Handles a resize notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Resized"/>.
            </summary>
            <param name="clientSize">The new client size.</param>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.HandlePositionChanged(Avalonia.PixelPoint)">
            <summary>
            Handles a window position change notification from 
            <see cref="P:Avalonia.Platform.IWindowBaseImpl.PositionChanged"/>.
            </summary>
            <param name="pos">The window position.</param>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.HandleActivated">
            <summary>
            Handles an activated notification from <see cref="P:Avalonia.Platform.IWindowBaseImpl.Activated"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.HandleDeactivated">
            <summary>
            Handles a deactivated notification from <see cref="P:Avalonia.Platform.IWindowBaseImpl.Deactivated"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.BeginMoveDrag">
            <summary>
            Starts moving a window with left button being held. Should be called from left mouse button press event handler
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WindowBase.BeginResizeDrag(Avalonia.Controls.WindowEdge)">
            <summary>
            Starts resizing a window. This function is used if an application has window resizing controls. 
            Should be called from left mouse button press event handler
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowIcon">
            <summary>
            Represents an icon for a window.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowStartupLocation">
            <summary>
            Determines the startup location of the window.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowStartupLocation.Manual">
            <summary>
            The startup location is defined by the Position property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowStartupLocation.CenterScreen">
            <summary>
            The startup location is the center of the screen.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowStartupLocation.CenterOwner">
            <summary>
            The startup location is the center of the owner window. If the owner window is not specified, the startup location will be <see cref="F:Avalonia.Controls.WindowStartupLocation.Manual"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowState">
            <summary>
            Defines the minimized/maximized state of a <see cref="T:Avalonia.Controls.Window"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowState.Normal">
            <summary>
            The window is neither minimized or maximized.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowState.Minimized">
            <summary>
            The window is minimized.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowState.Maximized">
            <summary>
            The window is maximized.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WrapPanel">
            <summary>
            Positions child elements in sequential position from left to right, 
            breaking content to the next line at the edge of the containing box. 
            Subsequent ordering happens sequentially from top to bottom or from right to left, 
            depending on the value of the Orientation property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WrapPanel.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.WrapPanel.Orientation"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.WrapPanel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WrapPanel.Orientation">
            <summary>
            Gets or sets the orientation in which child controls will be layed out.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.Avalonia#Input#INavigableContainer#GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement,System.Boolean)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <param name="wrap">Whether to wrap around when the first or last item is reached.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.WrapPanel.UVSize">
            <summary>
            Used to not not write separate code for horizontal and vertical orientation.
            U is direction in line. (x if orientation is horizontal)
            V is direction of lines. (y if orientation is horizontal)
            </summary>
        </member>
        <member name="T:Avalonia.Application">
            <summary>
            Encapsulates a Avalonia application.
            </summary>
            <remarks>
            The <see cref="T:Avalonia.Application"/> class encapsulates Avalonia application-specific
            functionality, including:
            - A global set of <see cref="P:Avalonia.Application.DataTemplates"/>.
            - A global set of <see cref="P:Avalonia.Application.Styles"/>.
            - A <see cref="P:Avalonia.Application.FocusManager"/>.
            - An <see cref="P:Avalonia.Application.InputManager"/>.
            - Registers services needed by the rest of Avalonia in the <see cref="M:Avalonia.Application.RegisterServices"/>
            method.
            - Tracks the lifetime of the application.
            </remarks>
        </member>
        <member name="F:Avalonia.Application._dataTemplates">
            <summary>
            The application-global data templates.
            </summary>
        </member>
        <member name="M:Avalonia.Application.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Application"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Application.ResourcesChanged">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Application.Current">
            <summary>
            Gets the current instance of the <see cref="T:Avalonia.Application"/> class.
            </summary>
            <value>
            The current instance of the <see cref="T:Avalonia.Application"/> class.
            </value>
        </member>
        <member name="P:Avalonia.Application.DataTemplates">
            <summary>
            Gets or sets the application's global data templates.
            </summary>
            <value>
            The application's global data templates.
            </value>
        </member>
        <member name="P:Avalonia.Application.FocusManager">
            <summary>
            Gets the application's focus manager.
            </summary>
            <value>
            The application's focus manager.
            </value>
        </member>
        <member name="P:Avalonia.Application.InputManager">
            <summary>
            Gets the application's input manager.
            </summary>
            <value>
            The application's input manager.
            </value>
        </member>
        <member name="P:Avalonia.Application.Clipboard">
            <summary>
            Gets the application clipboard.
            </summary>
        </member>
        <member name="P:Avalonia.Application.Resources">
            <summary>
            Gets the application's global resource dictionary.
            </summary>
        </member>
        <member name="P:Avalonia.Application.Styles">
            <summary>
            Gets the application's global styles.
            </summary>
            <value>
            The application's global styles.
            </value>
            <remarks>
            Global styles apply to all windows in the application.
            </remarks>
        </member>
        <member name="P:Avalonia.Application.Avalonia#Controls#Templates#IDataTemplateHost#IsDataTemplatesInitialized">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Application.Avalonia#Styling#IStyleHost#StylingParent">
            <summary>
            Gets the styling parent of the application, which is null.
            </summary>
        </member>
        <member name="P:Avalonia.Application.Avalonia#Styling#IStyleHost#IsStylesInitialized">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Application.Avalonia#Controls#IResourceProvider#HasResources">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Application.Avalonia#Controls#IResourceNode#ResourceParent">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Application.ExitMode">
            <summary>
            Gets or sets the <see cref="P:Avalonia.Application.ExitMode"/>. This property indicates whether the application exits explicitly or implicitly. 
            If <see cref="P:Avalonia.Application.ExitMode"/> is set to OnExplicitExit the application is only closes if Exit is called.
            The default is OnLastWindowClose
            </summary>
            <value>
            The shutdown mode.
            </value>
        </member>
        <member name="P:Avalonia.Application.MainWindow">
            <summary>
            Gets or sets the main window of the application.
            </summary>
            <value>
            The main window.
            </value>
        </member>
        <member name="P:Avalonia.Application.Windows">
            <summary>
            Gets the open windows of the application.
            </summary>
            <value>
            The windows.
            </value>
        </member>
        <member name="P:Avalonia.Application.IsExiting">
            <summary>
            Gets or sets a value indicating whether this instance is existing.
            </summary>
            <value>
              <c>true</c> if this instance is existing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Avalonia.Application.Initialize">
            <summary>
            Initializes the application by loading XAML etc.
            </summary>
        </member>
        <member name="M:Avalonia.Application.Run(Avalonia.Input.ICloseable)">
            <summary>
            Runs the application's main loop until the <see cref="T:Avalonia.Input.ICloseable"/> is closed.
            </summary>
            <param name="closable">The closable to track</param>
        </member>
        <member name="M:Avalonia.Application.Run(Avalonia.Controls.Window)">
            <summary>
            Runs the application's main loop until some condition occurs that is specified by ExitMode.
            </summary>
            <param name="mainWindow">The main window</param>
        </member>
        <member name="M:Avalonia.Application.Run(System.Threading.CancellationToken)">
            <summary>
            Runs the application's main loop until the <see cref="T:System.Threading.CancellationToken"/> is canceled.
            </summary>
            <param name="token">The token to track</param>
        </member>
        <member name="M:Avalonia.Application.Exit">
            <summary>
            Exits the application
            </summary>
        </member>
        <member name="M:Avalonia.Application.Avalonia#Controls#IResourceProvider#TryGetResource(System.String,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Application.OnExit">
            <summary>
            Sent when the application is exiting.
            </summary>
        </member>
        <member name="M:Avalonia.Application.OnExiting(System.Object,System.EventArgs)">
            <summary>
            Called when the application is exiting.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalonia.Application.RegisterServices">
            <summary>
            Register's the services needed by Avalonia.
            </summary>
        </member>
        <member name="T:Avalonia.ExitMode">
            <summary>
            Enum for ExitMode
            </summary>
        </member>
        <member name="F:Avalonia.ExitMode.OnLastWindowClose">
            <summary>
            Indicates an implicit call to Application.Exit when the last window closes.
            </summary>
        </member>
        <member name="F:Avalonia.ExitMode.OnMainWindowClose">
            <summary>
            Indicates an implicit call to Application.Exit when the main window closes.
            </summary>
        </member>
        <member name="F:Avalonia.ExitMode.OnExplicitExit">
            <summary>
            Indicates that the application only exits on an explicit call to Application.Exit.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.ExportAvaloniaModuleAttribute">
            <summary>
            Defines an "Avalonia Module", a 3rd party extension to Avalonia that can be automatically initialized by an AppBuilder instance.
            </summary>
            <remarks>
            Avalonia Modules can either be platform independent (ex default control styles provider) or dependent on a
            specific windowing or rendering subsystem being used (ex native rendering speedup, subsystem-specific interop backends).
            In the case of a subsystem-specific module, you can specify multiple module implementations, and also a fallback
            platform-independent module if you so choose. Additionally, these different implementations can be in different assemblies.
            They just need to all share the same module name.
            
            For example, if I had a module Foo that has a special back-end for Skia and a less performant/less user friendly back-end for
            any other rendering subsystem, I would do the following:
            <code>
            // In assembly FooModuleSkia.dll
            [assembly:ExportAvaloniaModule("Foo", typeof(FooModuleSkia), ForRenderingSubsystem="Skia")]
            
            class FooModuleSkia
            {
                public FooModuleSkia()
                {
                    InitializeModule();
                }
            }
            
            // In assembly FooModuleFallback.dll
            [assembly:ExportAvaloniaModule("Foo", typeof(FooModuleFallback))]
            
            class FooModuleFallback
            {
                public FooModuleFallback()
                {
                    InitializeModule();
                }
            }
            
            </code>
            The fallback module will only be initialized if the Skia-specific module is not applicable.
            </remarks>
        </member>
        <member name="T:Avalonia.Platform.IEmbeddableWindowImpl">
            <summary>
            Defines a platform-specific embeddable window implementation.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IPopupImpl">
            <summary>
            Defines a platform-specific popup window implementation.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.ITopLevelImpl">
            <summary>
            Defines a platform-specific top-level window implementation.
            </summary>
            <remarks>
            This interface is the common interface to <see cref="T:Avalonia.Platform.IWindowImpl"/> and
            <see cref="T:Avalonia.Platform.IPopupImpl"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.ClientSize">
            <summary>
            Gets the client size of the toplevel.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Scaling">
            <summary>
            Gets the scaling factor for the toplevel.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Surfaces">
            <summary>
            The list of native platform's surfaces that can be consumed by rendering subsystems.
            </summary>
            <remarks>
            Rendering platform will check that list and see if it can utilize one of them to output.
            It should be enough to expose a native window handle via IPlatformHandle
            and add support for framebuffer (even if it's emulated one) via IFramebufferPlatformSurface.
            If you have some rendering platform that's tied to your particular windowing platform,
            just expose some toolkit-specific object (e. g. Func&lt;Gdk.Drawable&gt; in case of GTK#+Cairo)
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Input">
            <summary>
            Gets or sets a method called when the toplevel receives input.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Paint">
            <summary>
            Gets or sets a method called when the toplevel requires painting.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Resized">
            <summary>
            Gets or sets a method called when the toplevel is resized.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.ScalingChanged">
            <summary>
            Gets or sets a method called when the toplevel's scaling changes.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.CreateRenderer(Avalonia.Rendering.IRenderRoot)">
            <summary>
            Creates a new renderer for the toplevel.
            </summary>
            <param name="root">The toplevel.</param>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.Invalidate(Avalonia.Rect)">
            <summary>
            Invalidates a rect on the toplevel.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.SetInputRoot(Avalonia.Input.IInputRoot)">
            <summary>
            Sets the <see cref="T:Avalonia.Input.IInputRoot"/> for the toplevel.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.PointToClient(Avalonia.PixelPoint)">
            <summary>
            Converts a point from screen to client coordinates.
            </summary>
            <param name="point">The point in screen coordinates.</param>
            <returns>The point in client coordinates.</returns>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.PointToScreen(Avalonia.Point)">
            <summary>
            Converts a point from client to screen coordinates.
            </summary>
            <param name="point">The point in client coordinates.</param>
            <returns>The point in screen coordinates.</returns>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.SetCursor(Avalonia.Platform.IPlatformHandle)">
            <summary>
            Sets the cursor associated with the toplevel.
            </summary>
            <param name="cursor">The cursor. Use null for default cursor</param>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Closed">
            <summary>
            Gets or sets a method called when the underlying implementation is destroyed.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.MouseDevice">
            <summary>
            Gets a mouse device associated with toplevel
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.Show">
            <summary>
            Shows the top level.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.BeginMoveDrag">
            <summary>
            Starts moving a window with left button being held. Should be called from left mouse button press event handler.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.BeginResizeDrag(Avalonia.Controls.WindowEdge)">
            <summary>
            Starts resizing a window. This function is used if an application has window resizing controls. 
            Should be called from left mouse button press event handler
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.Position">
            <summary>
            Gets the position of the window in device pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.PositionChanged">
            <summary>
            Gets or sets a method called when the window's position changes.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.Activate">
            <summary>
            Activates the window.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.Deactivated">
            <summary>
            Gets or sets a method called when the window is deactivated (loses focus).
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.Activated">
            <summary>
            Gets or sets a method called when the window is activated (receives focus).
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.Handle">
            <summary>
            Gets the platform window handle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.MaxClientSize">
            <summary>
            Gets the maximum size of a window on the system.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.Resize(Avalonia.Size)">
            <summary>
            Sets the client size of the top level.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.SetMinMaxSize(Avalonia.Size,Avalonia.Size)">
            <summary>
            Minimum width of the window.
            </summary>
            
        </member>
        <member name="M:Avalonia.Platform.IWindowBaseImpl.SetTopmost(System.Boolean)">
            <summary>
            Sets whether this window appears on top of all other windows
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowBaseImpl.Screen">
            <summary>
            Gets platform specific display information
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IWindowImpl">
            <summary>
            Defines a platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.WindowState">
            <summary>
            Gets or sets the minimized/maximized state of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.WindowStateChanged">
            <summary>
            Gets or sets a method called when the minimized/maximized state of the window changes.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetTitle(System.String)">
            <summary>
            Sets the title of the window.
            </summary>
            <param name="title">The title.</param>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.ShowDialog(Avalonia.Platform.IWindowImpl)">
            <summary>
            Shows the window as a dialog.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetSystemDecorations(System.Boolean)">
            <summary>
            Enables or disables system window decorations (title bar, buttons, etc)
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetIcon(Avalonia.Platform.IWindowIconImpl)">
            <summary>
            Sets the icon of this window.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.ShowTaskbarIcon(System.Boolean)">
            <summary>
            Enables or disables the taskbar icon
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.CanResize(System.Boolean)">
            <summary>
            Enables or disables resizing of the window
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.Closing">
            <summary>
            Gets or sets a method called before the underlying implementation is destroyed.
            Return true to prevent the underlying implementation from closing.
            </summary>
        </member>
        <member name="P:Avalonia.WindowCollection.Count">
            <inheritdoc />
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Avalonia.WindowCollection.Item(System.Int32)">
            <inheritdoc />
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Window" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Avalonia.Controls.Window" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.WindowCollection.GetEnumerator">
            <inheritdoc />
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Avalonia.WindowCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Avalonia.WindowCollection.Add(Avalonia.Controls.Window)">
            <summary>
            Adds the specified window.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:Avalonia.WindowCollection.Remove(Avalonia.Controls.Window)">
            <summary>
            Removes the specified window.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:Avalonia.WindowCollection.Clear">
            <summary>
            Closes all windows and removes them from the underlying collection.
            </summary>
        </member>
    </members>
</doc>
